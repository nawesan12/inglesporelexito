
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Deal` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Deal
 * 
 */
export type DealModel = runtime.Types.Result.DefaultSelection<Prisma.$DealPayload>

export type AggregateDeal = {
  _count: DealCountAggregateOutputType | null
  _avg: DealAvgAggregateOutputType | null
  _sum: DealSumAggregateOutputType | null
  _min: DealMinAggregateOutputType | null
  _max: DealMaxAggregateOutputType | null
}

export type DealAvgAggregateOutputType = {
  value: number | null
  probability: number | null
}

export type DealSumAggregateOutputType = {
  value: number | null
  probability: number | null
}

export type DealMinAggregateOutputType = {
  id: string | null
  title: string | null
  value: number | null
  stage: $Enums.DealStage | null
  probability: number | null
  expectedClose: Date | null
  notes: string | null
  contactId: string | null
  companyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DealMaxAggregateOutputType = {
  id: string | null
  title: string | null
  value: number | null
  stage: $Enums.DealStage | null
  probability: number | null
  expectedClose: Date | null
  notes: string | null
  contactId: string | null
  companyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type DealCountAggregateOutputType = {
  id: number
  title: number
  value: number
  stage: number
  probability: number
  expectedClose: number
  notes: number
  contactId: number
  companyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type DealAvgAggregateInputType = {
  value?: true
  probability?: true
}

export type DealSumAggregateInputType = {
  value?: true
  probability?: true
}

export type DealMinAggregateInputType = {
  id?: true
  title?: true
  value?: true
  stage?: true
  probability?: true
  expectedClose?: true
  notes?: true
  contactId?: true
  companyId?: true
  createdAt?: true
  updatedAt?: true
}

export type DealMaxAggregateInputType = {
  id?: true
  title?: true
  value?: true
  stage?: true
  probability?: true
  expectedClose?: true
  notes?: true
  contactId?: true
  companyId?: true
  createdAt?: true
  updatedAt?: true
}

export type DealCountAggregateInputType = {
  id?: true
  title?: true
  value?: true
  stage?: true
  probability?: true
  expectedClose?: true
  notes?: true
  contactId?: true
  companyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type DealAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deal to aggregate.
   */
  where?: Prisma.DealWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deals to fetch.
   */
  orderBy?: Prisma.DealOrderByWithRelationInput | Prisma.DealOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.DealWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Deals
  **/
  _count?: true | DealCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to average
  **/
  _avg?: DealAvgAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to sum
  **/
  _sum?: DealSumAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: DealMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: DealMaxAggregateInputType
}

export type GetDealAggregateType<T extends DealAggregateArgs> = {
      [P in keyof T & keyof AggregateDeal]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateDeal[P]>
    : Prisma.GetScalarType<T[P], AggregateDeal[P]>
}




export type DealGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DealWhereInput
  orderBy?: Prisma.DealOrderByWithAggregationInput | Prisma.DealOrderByWithAggregationInput[]
  by: Prisma.DealScalarFieldEnum[] | Prisma.DealScalarFieldEnum
  having?: Prisma.DealScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: DealCountAggregateInputType | true
  _avg?: DealAvgAggregateInputType
  _sum?: DealSumAggregateInputType
  _min?: DealMinAggregateInputType
  _max?: DealMaxAggregateInputType
}

export type DealGroupByOutputType = {
  id: string
  title: string
  value: number
  stage: $Enums.DealStage
  probability: number | null
  expectedClose: Date | null
  notes: string | null
  contactId: string
  companyId: string | null
  createdAt: Date
  updatedAt: Date
  _count: DealCountAggregateOutputType | null
  _avg: DealAvgAggregateOutputType | null
  _sum: DealSumAggregateOutputType | null
  _min: DealMinAggregateOutputType | null
  _max: DealMaxAggregateOutputType | null
}

type GetDealGroupByPayload<T extends DealGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<DealGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof DealGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], DealGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], DealGroupByOutputType[P]>
      }
    >
  >



export type DealWhereInput = {
  AND?: Prisma.DealWhereInput | Prisma.DealWhereInput[]
  OR?: Prisma.DealWhereInput[]
  NOT?: Prisma.DealWhereInput | Prisma.DealWhereInput[]
  id?: Prisma.StringFilter<"Deal"> | string
  title?: Prisma.StringFilter<"Deal"> | string
  value?: Prisma.IntFilter<"Deal"> | number
  stage?: Prisma.EnumDealStageFilter<"Deal"> | $Enums.DealStage
  probability?: Prisma.IntNullableFilter<"Deal"> | number | null
  expectedClose?: Prisma.DateTimeNullableFilter<"Deal"> | Date | string | null
  notes?: Prisma.StringNullableFilter<"Deal"> | string | null
  contactId?: Prisma.StringFilter<"Deal"> | string
  companyId?: Prisma.StringNullableFilter<"Deal"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Deal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Deal"> | Date | string
  contact?: Prisma.XOR<Prisma.ContactScalarRelationFilter, Prisma.ContactWhereInput>
  company?: Prisma.XOR<Prisma.CompanyNullableScalarRelationFilter, Prisma.CompanyWhereInput> | null
  tasks?: Prisma.TaskListRelationFilter
  interactions?: Prisma.InteractionListRelationFilter
}

export type DealOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  value?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  probability?: Prisma.SortOrderInput | Prisma.SortOrder
  expectedClose?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  contactId?: Prisma.SortOrder
  companyId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.ContactOrderByWithRelationInput
  company?: Prisma.CompanyOrderByWithRelationInput
  tasks?: Prisma.TaskOrderByRelationAggregateInput
  interactions?: Prisma.InteractionOrderByRelationAggregateInput
}

export type DealWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.DealWhereInput | Prisma.DealWhereInput[]
  OR?: Prisma.DealWhereInput[]
  NOT?: Prisma.DealWhereInput | Prisma.DealWhereInput[]
  title?: Prisma.StringFilter<"Deal"> | string
  value?: Prisma.IntFilter<"Deal"> | number
  stage?: Prisma.EnumDealStageFilter<"Deal"> | $Enums.DealStage
  probability?: Prisma.IntNullableFilter<"Deal"> | number | null
  expectedClose?: Prisma.DateTimeNullableFilter<"Deal"> | Date | string | null
  notes?: Prisma.StringNullableFilter<"Deal"> | string | null
  contactId?: Prisma.StringFilter<"Deal"> | string
  companyId?: Prisma.StringNullableFilter<"Deal"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Deal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Deal"> | Date | string
  contact?: Prisma.XOR<Prisma.ContactScalarRelationFilter, Prisma.ContactWhereInput>
  company?: Prisma.XOR<Prisma.CompanyNullableScalarRelationFilter, Prisma.CompanyWhereInput> | null
  tasks?: Prisma.TaskListRelationFilter
  interactions?: Prisma.InteractionListRelationFilter
}, "id">

export type DealOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  value?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  probability?: Prisma.SortOrderInput | Prisma.SortOrder
  expectedClose?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  contactId?: Prisma.SortOrder
  companyId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.DealCountOrderByAggregateInput
  _avg?: Prisma.DealAvgOrderByAggregateInput
  _max?: Prisma.DealMaxOrderByAggregateInput
  _min?: Prisma.DealMinOrderByAggregateInput
  _sum?: Prisma.DealSumOrderByAggregateInput
}

export type DealScalarWhereWithAggregatesInput = {
  AND?: Prisma.DealScalarWhereWithAggregatesInput | Prisma.DealScalarWhereWithAggregatesInput[]
  OR?: Prisma.DealScalarWhereWithAggregatesInput[]
  NOT?: Prisma.DealScalarWhereWithAggregatesInput | Prisma.DealScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Deal"> | string
  title?: Prisma.StringWithAggregatesFilter<"Deal"> | string
  value?: Prisma.IntWithAggregatesFilter<"Deal"> | number
  stage?: Prisma.EnumDealStageWithAggregatesFilter<"Deal"> | $Enums.DealStage
  probability?: Prisma.IntNullableWithAggregatesFilter<"Deal"> | number | null
  expectedClose?: Prisma.DateTimeNullableWithAggregatesFilter<"Deal"> | Date | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"Deal"> | string | null
  contactId?: Prisma.StringWithAggregatesFilter<"Deal"> | string
  companyId?: Prisma.StringNullableWithAggregatesFilter<"Deal"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Deal"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Deal"> | Date | string
}

export type DealCreateInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact: Prisma.ContactCreateNestedOneWithoutDealsInput
  company?: Prisma.CompanyCreateNestedOneWithoutDealsInput
  tasks?: Prisma.TaskCreateNestedManyWithoutDealInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutDealInput
}

export type DealUncheckedCreateInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  contactId: string
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutDealInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutDealInput
}

export type DealUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneRequiredWithoutDealsNestedInput
  company?: Prisma.CompanyUpdateOneWithoutDealsNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutDealNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutDealNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutDealNestedInput
}

export type DealCreateManyInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  contactId: string
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DealUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DealUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DealListRelationFilter = {
  every?: Prisma.DealWhereInput
  some?: Prisma.DealWhereInput
  none?: Prisma.DealWhereInput
}

export type DealOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type DealCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  value?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  probability?: Prisma.SortOrder
  expectedClose?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DealAvgOrderByAggregateInput = {
  value?: Prisma.SortOrder
  probability?: Prisma.SortOrder
}

export type DealMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  value?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  probability?: Prisma.SortOrder
  expectedClose?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DealMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  title?: Prisma.SortOrder
  value?: Prisma.SortOrder
  stage?: Prisma.SortOrder
  probability?: Prisma.SortOrder
  expectedClose?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type DealSumOrderByAggregateInput = {
  value?: Prisma.SortOrder
  probability?: Prisma.SortOrder
}

export type DealNullableScalarRelationFilter = {
  is?: Prisma.DealWhereInput | null
  isNot?: Prisma.DealWhereInput | null
}

export type DealCreateNestedManyWithoutCompanyInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutCompanyInput, Prisma.DealUncheckedCreateWithoutCompanyInput> | Prisma.DealCreateWithoutCompanyInput[] | Prisma.DealUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutCompanyInput | Prisma.DealCreateOrConnectWithoutCompanyInput[]
  createMany?: Prisma.DealCreateManyCompanyInputEnvelope
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
}

export type DealUncheckedCreateNestedManyWithoutCompanyInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutCompanyInput, Prisma.DealUncheckedCreateWithoutCompanyInput> | Prisma.DealCreateWithoutCompanyInput[] | Prisma.DealUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutCompanyInput | Prisma.DealCreateOrConnectWithoutCompanyInput[]
  createMany?: Prisma.DealCreateManyCompanyInputEnvelope
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
}

export type DealUpdateManyWithoutCompanyNestedInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutCompanyInput, Prisma.DealUncheckedCreateWithoutCompanyInput> | Prisma.DealCreateWithoutCompanyInput[] | Prisma.DealUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutCompanyInput | Prisma.DealCreateOrConnectWithoutCompanyInput[]
  upsert?: Prisma.DealUpsertWithWhereUniqueWithoutCompanyInput | Prisma.DealUpsertWithWhereUniqueWithoutCompanyInput[]
  createMany?: Prisma.DealCreateManyCompanyInputEnvelope
  set?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  disconnect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  delete?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  update?: Prisma.DealUpdateWithWhereUniqueWithoutCompanyInput | Prisma.DealUpdateWithWhereUniqueWithoutCompanyInput[]
  updateMany?: Prisma.DealUpdateManyWithWhereWithoutCompanyInput | Prisma.DealUpdateManyWithWhereWithoutCompanyInput[]
  deleteMany?: Prisma.DealScalarWhereInput | Prisma.DealScalarWhereInput[]
}

export type DealUncheckedUpdateManyWithoutCompanyNestedInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutCompanyInput, Prisma.DealUncheckedCreateWithoutCompanyInput> | Prisma.DealCreateWithoutCompanyInput[] | Prisma.DealUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutCompanyInput | Prisma.DealCreateOrConnectWithoutCompanyInput[]
  upsert?: Prisma.DealUpsertWithWhereUniqueWithoutCompanyInput | Prisma.DealUpsertWithWhereUniqueWithoutCompanyInput[]
  createMany?: Prisma.DealCreateManyCompanyInputEnvelope
  set?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  disconnect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  delete?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  update?: Prisma.DealUpdateWithWhereUniqueWithoutCompanyInput | Prisma.DealUpdateWithWhereUniqueWithoutCompanyInput[]
  updateMany?: Prisma.DealUpdateManyWithWhereWithoutCompanyInput | Prisma.DealUpdateManyWithWhereWithoutCompanyInput[]
  deleteMany?: Prisma.DealScalarWhereInput | Prisma.DealScalarWhereInput[]
}

export type DealCreateNestedManyWithoutContactInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutContactInput, Prisma.DealUncheckedCreateWithoutContactInput> | Prisma.DealCreateWithoutContactInput[] | Prisma.DealUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutContactInput | Prisma.DealCreateOrConnectWithoutContactInput[]
  createMany?: Prisma.DealCreateManyContactInputEnvelope
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
}

export type DealUncheckedCreateNestedManyWithoutContactInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutContactInput, Prisma.DealUncheckedCreateWithoutContactInput> | Prisma.DealCreateWithoutContactInput[] | Prisma.DealUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutContactInput | Prisma.DealCreateOrConnectWithoutContactInput[]
  createMany?: Prisma.DealCreateManyContactInputEnvelope
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
}

export type DealUpdateManyWithoutContactNestedInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutContactInput, Prisma.DealUncheckedCreateWithoutContactInput> | Prisma.DealCreateWithoutContactInput[] | Prisma.DealUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutContactInput | Prisma.DealCreateOrConnectWithoutContactInput[]
  upsert?: Prisma.DealUpsertWithWhereUniqueWithoutContactInput | Prisma.DealUpsertWithWhereUniqueWithoutContactInput[]
  createMany?: Prisma.DealCreateManyContactInputEnvelope
  set?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  disconnect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  delete?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  update?: Prisma.DealUpdateWithWhereUniqueWithoutContactInput | Prisma.DealUpdateWithWhereUniqueWithoutContactInput[]
  updateMany?: Prisma.DealUpdateManyWithWhereWithoutContactInput | Prisma.DealUpdateManyWithWhereWithoutContactInput[]
  deleteMany?: Prisma.DealScalarWhereInput | Prisma.DealScalarWhereInput[]
}

export type DealUncheckedUpdateManyWithoutContactNestedInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutContactInput, Prisma.DealUncheckedCreateWithoutContactInput> | Prisma.DealCreateWithoutContactInput[] | Prisma.DealUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutContactInput | Prisma.DealCreateOrConnectWithoutContactInput[]
  upsert?: Prisma.DealUpsertWithWhereUniqueWithoutContactInput | Prisma.DealUpsertWithWhereUniqueWithoutContactInput[]
  createMany?: Prisma.DealCreateManyContactInputEnvelope
  set?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  disconnect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  delete?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  connect?: Prisma.DealWhereUniqueInput | Prisma.DealWhereUniqueInput[]
  update?: Prisma.DealUpdateWithWhereUniqueWithoutContactInput | Prisma.DealUpdateWithWhereUniqueWithoutContactInput[]
  updateMany?: Prisma.DealUpdateManyWithWhereWithoutContactInput | Prisma.DealUpdateManyWithWhereWithoutContactInput[]
  deleteMany?: Prisma.DealScalarWhereInput | Prisma.DealScalarWhereInput[]
}

export type IntFieldUpdateOperationsInput = {
  set?: number
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type EnumDealStageFieldUpdateOperationsInput = {
  set?: $Enums.DealStage
}

export type NullableIntFieldUpdateOperationsInput = {
  set?: number | null
  increment?: number
  decrement?: number
  multiply?: number
  divide?: number
}

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null
}

export type DealCreateNestedOneWithoutTasksInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutTasksInput, Prisma.DealUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutTasksInput
  connect?: Prisma.DealWhereUniqueInput
}

export type DealUpdateOneWithoutTasksNestedInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutTasksInput, Prisma.DealUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutTasksInput
  upsert?: Prisma.DealUpsertWithoutTasksInput
  disconnect?: Prisma.DealWhereInput | boolean
  delete?: Prisma.DealWhereInput | boolean
  connect?: Prisma.DealWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DealUpdateToOneWithWhereWithoutTasksInput, Prisma.DealUpdateWithoutTasksInput>, Prisma.DealUncheckedUpdateWithoutTasksInput>
}

export type DealCreateNestedOneWithoutInteractionsInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutInteractionsInput, Prisma.DealUncheckedCreateWithoutInteractionsInput>
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutInteractionsInput
  connect?: Prisma.DealWhereUniqueInput
}

export type DealUpdateOneWithoutInteractionsNestedInput = {
  create?: Prisma.XOR<Prisma.DealCreateWithoutInteractionsInput, Prisma.DealUncheckedCreateWithoutInteractionsInput>
  connectOrCreate?: Prisma.DealCreateOrConnectWithoutInteractionsInput
  upsert?: Prisma.DealUpsertWithoutInteractionsInput
  disconnect?: Prisma.DealWhereInput | boolean
  delete?: Prisma.DealWhereInput | boolean
  connect?: Prisma.DealWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.DealUpdateToOneWithWhereWithoutInteractionsInput, Prisma.DealUpdateWithoutInteractionsInput>, Prisma.DealUncheckedUpdateWithoutInteractionsInput>
}

export type DealCreateWithoutCompanyInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact: Prisma.ContactCreateNestedOneWithoutDealsInput
  tasks?: Prisma.TaskCreateNestedManyWithoutDealInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutDealInput
}

export type DealUncheckedCreateWithoutCompanyInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  contactId: string
  createdAt?: Date | string
  updatedAt?: Date | string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutDealInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutDealInput
}

export type DealCreateOrConnectWithoutCompanyInput = {
  where: Prisma.DealWhereUniqueInput
  create: Prisma.XOR<Prisma.DealCreateWithoutCompanyInput, Prisma.DealUncheckedCreateWithoutCompanyInput>
}

export type DealCreateManyCompanyInputEnvelope = {
  data: Prisma.DealCreateManyCompanyInput | Prisma.DealCreateManyCompanyInput[]
  skipDuplicates?: boolean
}

export type DealUpsertWithWhereUniqueWithoutCompanyInput = {
  where: Prisma.DealWhereUniqueInput
  update: Prisma.XOR<Prisma.DealUpdateWithoutCompanyInput, Prisma.DealUncheckedUpdateWithoutCompanyInput>
  create: Prisma.XOR<Prisma.DealCreateWithoutCompanyInput, Prisma.DealUncheckedCreateWithoutCompanyInput>
}

export type DealUpdateWithWhereUniqueWithoutCompanyInput = {
  where: Prisma.DealWhereUniqueInput
  data: Prisma.XOR<Prisma.DealUpdateWithoutCompanyInput, Prisma.DealUncheckedUpdateWithoutCompanyInput>
}

export type DealUpdateManyWithWhereWithoutCompanyInput = {
  where: Prisma.DealScalarWhereInput
  data: Prisma.XOR<Prisma.DealUpdateManyMutationInput, Prisma.DealUncheckedUpdateManyWithoutCompanyInput>
}

export type DealScalarWhereInput = {
  AND?: Prisma.DealScalarWhereInput | Prisma.DealScalarWhereInput[]
  OR?: Prisma.DealScalarWhereInput[]
  NOT?: Prisma.DealScalarWhereInput | Prisma.DealScalarWhereInput[]
  id?: Prisma.StringFilter<"Deal"> | string
  title?: Prisma.StringFilter<"Deal"> | string
  value?: Prisma.IntFilter<"Deal"> | number
  stage?: Prisma.EnumDealStageFilter<"Deal"> | $Enums.DealStage
  probability?: Prisma.IntNullableFilter<"Deal"> | number | null
  expectedClose?: Prisma.DateTimeNullableFilter<"Deal"> | Date | string | null
  notes?: Prisma.StringNullableFilter<"Deal"> | string | null
  contactId?: Prisma.StringFilter<"Deal"> | string
  companyId?: Prisma.StringNullableFilter<"Deal"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Deal"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Deal"> | Date | string
}

export type DealCreateWithoutContactInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  company?: Prisma.CompanyCreateNestedOneWithoutDealsInput
  tasks?: Prisma.TaskCreateNestedManyWithoutDealInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutDealInput
}

export type DealUncheckedCreateWithoutContactInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutDealInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutDealInput
}

export type DealCreateOrConnectWithoutContactInput = {
  where: Prisma.DealWhereUniqueInput
  create: Prisma.XOR<Prisma.DealCreateWithoutContactInput, Prisma.DealUncheckedCreateWithoutContactInput>
}

export type DealCreateManyContactInputEnvelope = {
  data: Prisma.DealCreateManyContactInput | Prisma.DealCreateManyContactInput[]
  skipDuplicates?: boolean
}

export type DealUpsertWithWhereUniqueWithoutContactInput = {
  where: Prisma.DealWhereUniqueInput
  update: Prisma.XOR<Prisma.DealUpdateWithoutContactInput, Prisma.DealUncheckedUpdateWithoutContactInput>
  create: Prisma.XOR<Prisma.DealCreateWithoutContactInput, Prisma.DealUncheckedCreateWithoutContactInput>
}

export type DealUpdateWithWhereUniqueWithoutContactInput = {
  where: Prisma.DealWhereUniqueInput
  data: Prisma.XOR<Prisma.DealUpdateWithoutContactInput, Prisma.DealUncheckedUpdateWithoutContactInput>
}

export type DealUpdateManyWithWhereWithoutContactInput = {
  where: Prisma.DealScalarWhereInput
  data: Prisma.XOR<Prisma.DealUpdateManyMutationInput, Prisma.DealUncheckedUpdateManyWithoutContactInput>
}

export type DealCreateWithoutTasksInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact: Prisma.ContactCreateNestedOneWithoutDealsInput
  company?: Prisma.CompanyCreateNestedOneWithoutDealsInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutDealInput
}

export type DealUncheckedCreateWithoutTasksInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  contactId: string
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutDealInput
}

export type DealCreateOrConnectWithoutTasksInput = {
  where: Prisma.DealWhereUniqueInput
  create: Prisma.XOR<Prisma.DealCreateWithoutTasksInput, Prisma.DealUncheckedCreateWithoutTasksInput>
}

export type DealUpsertWithoutTasksInput = {
  update: Prisma.XOR<Prisma.DealUpdateWithoutTasksInput, Prisma.DealUncheckedUpdateWithoutTasksInput>
  create: Prisma.XOR<Prisma.DealCreateWithoutTasksInput, Prisma.DealUncheckedCreateWithoutTasksInput>
  where?: Prisma.DealWhereInput
}

export type DealUpdateToOneWithWhereWithoutTasksInput = {
  where?: Prisma.DealWhereInput
  data: Prisma.XOR<Prisma.DealUpdateWithoutTasksInput, Prisma.DealUncheckedUpdateWithoutTasksInput>
}

export type DealUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneRequiredWithoutDealsNestedInput
  company?: Prisma.CompanyUpdateOneWithoutDealsNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutDealNestedInput
}

export type DealCreateWithoutInteractionsInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  contact: Prisma.ContactCreateNestedOneWithoutDealsInput
  company?: Prisma.CompanyCreateNestedOneWithoutDealsInput
  tasks?: Prisma.TaskCreateNestedManyWithoutDealInput
}

export type DealUncheckedCreateWithoutInteractionsInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  contactId: string
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutDealInput
}

export type DealCreateOrConnectWithoutInteractionsInput = {
  where: Prisma.DealWhereUniqueInput
  create: Prisma.XOR<Prisma.DealCreateWithoutInteractionsInput, Prisma.DealUncheckedCreateWithoutInteractionsInput>
}

export type DealUpsertWithoutInteractionsInput = {
  update: Prisma.XOR<Prisma.DealUpdateWithoutInteractionsInput, Prisma.DealUncheckedUpdateWithoutInteractionsInput>
  create: Prisma.XOR<Prisma.DealCreateWithoutInteractionsInput, Prisma.DealUncheckedCreateWithoutInteractionsInput>
  where?: Prisma.DealWhereInput
}

export type DealUpdateToOneWithWhereWithoutInteractionsInput = {
  where?: Prisma.DealWhereInput
  data: Prisma.XOR<Prisma.DealUpdateWithoutInteractionsInput, Prisma.DealUncheckedUpdateWithoutInteractionsInput>
}

export type DealUpdateWithoutInteractionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneRequiredWithoutDealsNestedInput
  company?: Prisma.CompanyUpdateOneWithoutDealsNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateWithoutInteractionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutDealNestedInput
}

export type DealCreateManyCompanyInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  contactId: string
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DealUpdateWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneRequiredWithoutDealsNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutDealNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutDealNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateManyWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type DealCreateManyContactInput = {
  id?: string
  title: string
  value?: number
  stage?: $Enums.DealStage
  probability?: number | null
  expectedClose?: Date | string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type DealUpdateWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  company?: Prisma.CompanyUpdateOneWithoutDealsNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutDealNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutDealNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutDealNestedInput
}

export type DealUncheckedUpdateManyWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  title?: Prisma.StringFieldUpdateOperationsInput | string
  value?: Prisma.IntFieldUpdateOperationsInput | number
  stage?: Prisma.EnumDealStageFieldUpdateOperationsInput | $Enums.DealStage
  probability?: Prisma.NullableIntFieldUpdateOperationsInput | number | null
  expectedClose?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type DealCountOutputType
 */

export type DealCountOutputType = {
  tasks: number
  interactions: number
}

export type DealCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  tasks?: boolean | DealCountOutputTypeCountTasksArgs
  interactions?: boolean | DealCountOutputTypeCountInteractionsArgs
}

/**
 * DealCountOutputType without action
 */
export type DealCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the DealCountOutputType
   */
  select?: Prisma.DealCountOutputTypeSelect<ExtArgs> | null
}

/**
 * DealCountOutputType without action
 */
export type DealCountOutputTypeCountTasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
}

/**
 * DealCountOutputType without action
 */
export type DealCountOutputTypeCountInteractionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InteractionWhereInput
}


export type DealSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  value?: boolean
  stage?: boolean
  probability?: boolean
  expectedClose?: boolean
  notes?: boolean
  contactId?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
  company?: boolean | Prisma.Deal$companyArgs<ExtArgs>
  tasks?: boolean | Prisma.Deal$tasksArgs<ExtArgs>
  interactions?: boolean | Prisma.Deal$interactionsArgs<ExtArgs>
  _count?: boolean | Prisma.DealCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["deal"]>

export type DealSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  value?: boolean
  stage?: boolean
  probability?: boolean
  expectedClose?: boolean
  notes?: boolean
  contactId?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
  company?: boolean | Prisma.Deal$companyArgs<ExtArgs>
}, ExtArgs["result"]["deal"]>

export type DealSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  title?: boolean
  value?: boolean
  stage?: boolean
  probability?: boolean
  expectedClose?: boolean
  notes?: boolean
  contactId?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
  company?: boolean | Prisma.Deal$companyArgs<ExtArgs>
}, ExtArgs["result"]["deal"]>

export type DealSelectScalar = {
  id?: boolean
  title?: boolean
  value?: boolean
  stage?: boolean
  probability?: boolean
  expectedClose?: boolean
  notes?: boolean
  contactId?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type DealOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "title" | "value" | "stage" | "probability" | "expectedClose" | "notes" | "contactId" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["deal"]>
export type DealInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
  company?: boolean | Prisma.Deal$companyArgs<ExtArgs>
  tasks?: boolean | Prisma.Deal$tasksArgs<ExtArgs>
  interactions?: boolean | Prisma.Deal$interactionsArgs<ExtArgs>
  _count?: boolean | Prisma.DealCountOutputTypeDefaultArgs<ExtArgs>
}
export type DealIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
  company?: boolean | Prisma.Deal$companyArgs<ExtArgs>
}
export type DealIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
  company?: boolean | Prisma.Deal$companyArgs<ExtArgs>
}

export type $DealPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Deal"
  objects: {
    contact: Prisma.$ContactPayload<ExtArgs>
    company: Prisma.$CompanyPayload<ExtArgs> | null
    tasks: Prisma.$TaskPayload<ExtArgs>[]
    interactions: Prisma.$InteractionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    title: string
    value: number
    stage: $Enums.DealStage
    probability: number | null
    expectedClose: Date | null
    notes: string | null
    contactId: string
    companyId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["deal"]>
  composites: {}
}

export type DealGetPayload<S extends boolean | null | undefined | DealDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$DealPayload, S>

export type DealCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<DealFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: DealCountAggregateInputType | true
  }

export interface DealDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Deal'], meta: { name: 'Deal' } }
  /**
   * Find zero or one Deal that matches the filter.
   * @param {DealFindUniqueArgs} args - Arguments to find a Deal
   * @example
   * // Get one Deal
   * const deal = await prisma.deal.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends DealFindUniqueArgs>(args: Prisma.SelectSubset<T, DealFindUniqueArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Deal that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {DealFindUniqueOrThrowArgs} args - Arguments to find a Deal
   * @example
   * // Get one Deal
   * const deal = await prisma.deal.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends DealFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, DealFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deal that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealFindFirstArgs} args - Arguments to find a Deal
   * @example
   * // Get one Deal
   * const deal = await prisma.deal.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends DealFindFirstArgs>(args?: Prisma.SelectSubset<T, DealFindFirstArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Deal that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealFindFirstOrThrowArgs} args - Arguments to find a Deal
   * @example
   * // Get one Deal
   * const deal = await prisma.deal.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends DealFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, DealFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Deals that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Deals
   * const deals = await prisma.deal.findMany()
   * 
   * // Get first 10 Deals
   * const deals = await prisma.deal.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const dealWithIdOnly = await prisma.deal.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends DealFindManyArgs>(args?: Prisma.SelectSubset<T, DealFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Deal.
   * @param {DealCreateArgs} args - Arguments to create a Deal.
   * @example
   * // Create one Deal
   * const Deal = await prisma.deal.create({
   *   data: {
   *     // ... data to create a Deal
   *   }
   * })
   * 
   */
  create<T extends DealCreateArgs>(args: Prisma.SelectSubset<T, DealCreateArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Deals.
   * @param {DealCreateManyArgs} args - Arguments to create many Deals.
   * @example
   * // Create many Deals
   * const deal = await prisma.deal.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends DealCreateManyArgs>(args?: Prisma.SelectSubset<T, DealCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Deals and returns the data saved in the database.
   * @param {DealCreateManyAndReturnArgs} args - Arguments to create many Deals.
   * @example
   * // Create many Deals
   * const deal = await prisma.deal.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Deals and only return the `id`
   * const dealWithIdOnly = await prisma.deal.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends DealCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, DealCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Deal.
   * @param {DealDeleteArgs} args - Arguments to delete one Deal.
   * @example
   * // Delete one Deal
   * const Deal = await prisma.deal.delete({
   *   where: {
   *     // ... filter to delete one Deal
   *   }
   * })
   * 
   */
  delete<T extends DealDeleteArgs>(args: Prisma.SelectSubset<T, DealDeleteArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Deal.
   * @param {DealUpdateArgs} args - Arguments to update one Deal.
   * @example
   * // Update one Deal
   * const deal = await prisma.deal.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends DealUpdateArgs>(args: Prisma.SelectSubset<T, DealUpdateArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Deals.
   * @param {DealDeleteManyArgs} args - Arguments to filter Deals to delete.
   * @example
   * // Delete a few Deals
   * const { count } = await prisma.deal.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends DealDeleteManyArgs>(args?: Prisma.SelectSubset<T, DealDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Deals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Deals
   * const deal = await prisma.deal.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends DealUpdateManyArgs>(args: Prisma.SelectSubset<T, DealUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Deals and returns the data updated in the database.
   * @param {DealUpdateManyAndReturnArgs} args - Arguments to update many Deals.
   * @example
   * // Update many Deals
   * const deal = await prisma.deal.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Deals and only return the `id`
   * const dealWithIdOnly = await prisma.deal.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends DealUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, DealUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Deal.
   * @param {DealUpsertArgs} args - Arguments to update or create a Deal.
   * @example
   * // Update or create a Deal
   * const deal = await prisma.deal.upsert({
   *   create: {
   *     // ... data to create a Deal
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Deal we want to update
   *   }
   * })
   */
  upsert<T extends DealUpsertArgs>(args: Prisma.SelectSubset<T, DealUpsertArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Deals.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealCountArgs} args - Arguments to filter Deals to count.
   * @example
   * // Count the number of Deals
   * const count = await prisma.deal.count({
   *   where: {
   *     // ... the filter for the Deals we want to count
   *   }
   * })
  **/
  count<T extends DealCountArgs>(
    args?: Prisma.Subset<T, DealCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], DealCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Deal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends DealAggregateArgs>(args: Prisma.Subset<T, DealAggregateArgs>): Prisma.PrismaPromise<GetDealAggregateType<T>>

  /**
   * Group by Deal.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {DealGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends DealGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: DealGroupByArgs['orderBy'] }
      : { orderBy?: DealGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, DealGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDealGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Deal model
 */
readonly fields: DealFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Deal.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__DealClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  contact<T extends Prisma.ContactDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ContactDefaultArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  company<T extends Prisma.Deal$companyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Deal$companyArgs<ExtArgs>>): Prisma.Prisma__CompanyClient<runtime.Types.Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  tasks<T extends Prisma.Deal$tasksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Deal$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  interactions<T extends Prisma.Deal$interactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Deal$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Deal model
 */
export interface DealFieldRefs {
  readonly id: Prisma.FieldRef<"Deal", 'String'>
  readonly title: Prisma.FieldRef<"Deal", 'String'>
  readonly value: Prisma.FieldRef<"Deal", 'Int'>
  readonly stage: Prisma.FieldRef<"Deal", 'DealStage'>
  readonly probability: Prisma.FieldRef<"Deal", 'Int'>
  readonly expectedClose: Prisma.FieldRef<"Deal", 'DateTime'>
  readonly notes: Prisma.FieldRef<"Deal", 'String'>
  readonly contactId: Prisma.FieldRef<"Deal", 'String'>
  readonly companyId: Prisma.FieldRef<"Deal", 'String'>
  readonly createdAt: Prisma.FieldRef<"Deal", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Deal", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Deal findUnique
 */
export type DealFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * Filter, which Deal to fetch.
   */
  where: Prisma.DealWhereUniqueInput
}

/**
 * Deal findUniqueOrThrow
 */
export type DealFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * Filter, which Deal to fetch.
   */
  where: Prisma.DealWhereUniqueInput
}

/**
 * Deal findFirst
 */
export type DealFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * Filter, which Deal to fetch.
   */
  where?: Prisma.DealWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deals to fetch.
   */
  orderBy?: Prisma.DealOrderByWithRelationInput | Prisma.DealOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Deals.
   */
  cursor?: Prisma.DealWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Deals.
   */
  distinct?: Prisma.DealScalarFieldEnum | Prisma.DealScalarFieldEnum[]
}

/**
 * Deal findFirstOrThrow
 */
export type DealFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * Filter, which Deal to fetch.
   */
  where?: Prisma.DealWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deals to fetch.
   */
  orderBy?: Prisma.DealOrderByWithRelationInput | Prisma.DealOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Deals.
   */
  cursor?: Prisma.DealWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deals.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Deals.
   */
  distinct?: Prisma.DealScalarFieldEnum | Prisma.DealScalarFieldEnum[]
}

/**
 * Deal findMany
 */
export type DealFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * Filter, which Deals to fetch.
   */
  where?: Prisma.DealWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Deals to fetch.
   */
  orderBy?: Prisma.DealOrderByWithRelationInput | Prisma.DealOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Deals.
   */
  cursor?: Prisma.DealWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Deals from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Deals.
   */
  skip?: number
  distinct?: Prisma.DealScalarFieldEnum | Prisma.DealScalarFieldEnum[]
}

/**
 * Deal create
 */
export type DealCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * The data needed to create a Deal.
   */
  data: Prisma.XOR<Prisma.DealCreateInput, Prisma.DealUncheckedCreateInput>
}

/**
 * Deal createMany
 */
export type DealCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Deals.
   */
  data: Prisma.DealCreateManyInput | Prisma.DealCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Deal createManyAndReturn
 */
export type DealCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * The data used to create many Deals.
   */
  data: Prisma.DealCreateManyInput | Prisma.DealCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Deal update
 */
export type DealUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * The data needed to update a Deal.
   */
  data: Prisma.XOR<Prisma.DealUpdateInput, Prisma.DealUncheckedUpdateInput>
  /**
   * Choose, which Deal to update.
   */
  where: Prisma.DealWhereUniqueInput
}

/**
 * Deal updateMany
 */
export type DealUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Deals.
   */
  data: Prisma.XOR<Prisma.DealUpdateManyMutationInput, Prisma.DealUncheckedUpdateManyInput>
  /**
   * Filter which Deals to update
   */
  where?: Prisma.DealWhereInput
  /**
   * Limit how many Deals to update.
   */
  limit?: number
}

/**
 * Deal updateManyAndReturn
 */
export type DealUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * The data used to update Deals.
   */
  data: Prisma.XOR<Prisma.DealUpdateManyMutationInput, Prisma.DealUncheckedUpdateManyInput>
  /**
   * Filter which Deals to update
   */
  where?: Prisma.DealWhereInput
  /**
   * Limit how many Deals to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Deal upsert
 */
export type DealUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * The filter to search for the Deal to update in case it exists.
   */
  where: Prisma.DealWhereUniqueInput
  /**
   * In case the Deal found by the `where` argument doesn't exist, create a new Deal with this data.
   */
  create: Prisma.XOR<Prisma.DealCreateInput, Prisma.DealUncheckedCreateInput>
  /**
   * In case the Deal was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.DealUpdateInput, Prisma.DealUncheckedUpdateInput>
}

/**
 * Deal delete
 */
export type DealDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  /**
   * Filter which Deal to delete.
   */
  where: Prisma.DealWhereUniqueInput
}

/**
 * Deal deleteMany
 */
export type DealDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Deals to delete
   */
  where?: Prisma.DealWhereInput
  /**
   * Limit how many Deals to delete.
   */
  limit?: number
}

/**
 * Deal.company
 */
export type Deal$companyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Company
   */
  select?: Prisma.CompanySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Company
   */
  omit?: Prisma.CompanyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyInclude<ExtArgs> | null
  where?: Prisma.CompanyWhereInput
}

/**
 * Deal.tasks
 */
export type Deal$tasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  cursor?: Prisma.TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Deal.interactions
 */
export type Deal$interactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  where?: Prisma.InteractionWhereInput
  orderBy?: Prisma.InteractionOrderByWithRelationInput | Prisma.InteractionOrderByWithRelationInput[]
  cursor?: Prisma.InteractionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InteractionScalarFieldEnum | Prisma.InteractionScalarFieldEnum[]
}

/**
 * Deal without action
 */
export type DealDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
}
