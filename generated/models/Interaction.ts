
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Interaction` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Interaction
 * 
 */
export type InteractionModel = runtime.Types.Result.DefaultSelection<Prisma.$InteractionPayload>

export type AggregateInteraction = {
  _count: InteractionCountAggregateOutputType | null
  _min: InteractionMinAggregateOutputType | null
  _max: InteractionMaxAggregateOutputType | null
}

export type InteractionMinAggregateOutputType = {
  id: string | null
  channel: string | null
  summary: string | null
  occurredAt: Date | null
  contactId: string | null
  dealId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InteractionMaxAggregateOutputType = {
  id: string | null
  channel: string | null
  summary: string | null
  occurredAt: Date | null
  contactId: string | null
  dealId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type InteractionCountAggregateOutputType = {
  id: number
  channel: number
  summary: number
  occurredAt: number
  contactId: number
  dealId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type InteractionMinAggregateInputType = {
  id?: true
  channel?: true
  summary?: true
  occurredAt?: true
  contactId?: true
  dealId?: true
  createdAt?: true
  updatedAt?: true
}

export type InteractionMaxAggregateInputType = {
  id?: true
  channel?: true
  summary?: true
  occurredAt?: true
  contactId?: true
  dealId?: true
  createdAt?: true
  updatedAt?: true
}

export type InteractionCountAggregateInputType = {
  id?: true
  channel?: true
  summary?: true
  occurredAt?: true
  contactId?: true
  dealId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type InteractionAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Interaction to aggregate.
   */
  where?: Prisma.InteractionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Interactions to fetch.
   */
  orderBy?: Prisma.InteractionOrderByWithRelationInput | Prisma.InteractionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.InteractionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Interactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Interactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Interactions
  **/
  _count?: true | InteractionCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: InteractionMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: InteractionMaxAggregateInputType
}

export type GetInteractionAggregateType<T extends InteractionAggregateArgs> = {
      [P in keyof T & keyof AggregateInteraction]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateInteraction[P]>
    : Prisma.GetScalarType<T[P], AggregateInteraction[P]>
}




export type InteractionGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InteractionWhereInput
  orderBy?: Prisma.InteractionOrderByWithAggregationInput | Prisma.InteractionOrderByWithAggregationInput[]
  by: Prisma.InteractionScalarFieldEnum[] | Prisma.InteractionScalarFieldEnum
  having?: Prisma.InteractionScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: InteractionCountAggregateInputType | true
  _min?: InteractionMinAggregateInputType
  _max?: InteractionMaxAggregateInputType
}

export type InteractionGroupByOutputType = {
  id: string
  channel: string
  summary: string
  occurredAt: Date
  contactId: string | null
  dealId: string | null
  createdAt: Date
  updatedAt: Date
  _count: InteractionCountAggregateOutputType | null
  _min: InteractionMinAggregateOutputType | null
  _max: InteractionMaxAggregateOutputType | null
}

type GetInteractionGroupByPayload<T extends InteractionGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<InteractionGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof InteractionGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], InteractionGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], InteractionGroupByOutputType[P]>
      }
    >
  >



export type InteractionWhereInput = {
  AND?: Prisma.InteractionWhereInput | Prisma.InteractionWhereInput[]
  OR?: Prisma.InteractionWhereInput[]
  NOT?: Prisma.InteractionWhereInput | Prisma.InteractionWhereInput[]
  id?: Prisma.StringFilter<"Interaction"> | string
  channel?: Prisma.StringFilter<"Interaction"> | string
  summary?: Prisma.StringFilter<"Interaction"> | string
  occurredAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  contactId?: Prisma.StringNullableFilter<"Interaction"> | string | null
  dealId?: Prisma.StringNullableFilter<"Interaction"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  contact?: Prisma.XOR<Prisma.ContactNullableScalarRelationFilter, Prisma.ContactWhereInput> | null
  deal?: Prisma.XOR<Prisma.DealNullableScalarRelationFilter, Prisma.DealWhereInput> | null
}

export type InteractionOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  occurredAt?: Prisma.SortOrder
  contactId?: Prisma.SortOrderInput | Prisma.SortOrder
  dealId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  contact?: Prisma.ContactOrderByWithRelationInput
  deal?: Prisma.DealOrderByWithRelationInput
}

export type InteractionWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.InteractionWhereInput | Prisma.InteractionWhereInput[]
  OR?: Prisma.InteractionWhereInput[]
  NOT?: Prisma.InteractionWhereInput | Prisma.InteractionWhereInput[]
  channel?: Prisma.StringFilter<"Interaction"> | string
  summary?: Prisma.StringFilter<"Interaction"> | string
  occurredAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  contactId?: Prisma.StringNullableFilter<"Interaction"> | string | null
  dealId?: Prisma.StringNullableFilter<"Interaction"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  contact?: Prisma.XOR<Prisma.ContactNullableScalarRelationFilter, Prisma.ContactWhereInput> | null
  deal?: Prisma.XOR<Prisma.DealNullableScalarRelationFilter, Prisma.DealWhereInput> | null
}, "id">

export type InteractionOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  occurredAt?: Prisma.SortOrder
  contactId?: Prisma.SortOrderInput | Prisma.SortOrder
  dealId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.InteractionCountOrderByAggregateInput
  _max?: Prisma.InteractionMaxOrderByAggregateInput
  _min?: Prisma.InteractionMinOrderByAggregateInput
}

export type InteractionScalarWhereWithAggregatesInput = {
  AND?: Prisma.InteractionScalarWhereWithAggregatesInput | Prisma.InteractionScalarWhereWithAggregatesInput[]
  OR?: Prisma.InteractionScalarWhereWithAggregatesInput[]
  NOT?: Prisma.InteractionScalarWhereWithAggregatesInput | Prisma.InteractionScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Interaction"> | string
  channel?: Prisma.StringWithAggregatesFilter<"Interaction"> | string
  summary?: Prisma.StringWithAggregatesFilter<"Interaction"> | string
  occurredAt?: Prisma.DateTimeWithAggregatesFilter<"Interaction"> | Date | string
  contactId?: Prisma.StringNullableWithAggregatesFilter<"Interaction"> | string | null
  dealId?: Prisma.StringNullableWithAggregatesFilter<"Interaction"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Interaction"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Interaction"> | Date | string
}

export type InteractionCreateInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  contact?: Prisma.ContactCreateNestedOneWithoutInteractionsInput
  deal?: Prisma.DealCreateNestedOneWithoutInteractionsInput
}

export type InteractionUncheckedCreateInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  contactId?: string | null
  dealId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InteractionUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneWithoutInteractionsNestedInput
  deal?: Prisma.DealUpdateOneWithoutInteractionsNestedInput
}

export type InteractionUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contactId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dealId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InteractionCreateManyInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  contactId?: string | null
  dealId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InteractionUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InteractionUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contactId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  dealId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InteractionListRelationFilter = {
  every?: Prisma.InteractionWhereInput
  some?: Prisma.InteractionWhereInput
  none?: Prisma.InteractionWhereInput
}

export type InteractionOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type InteractionCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  occurredAt?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  dealId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InteractionMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  occurredAt?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  dealId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InteractionMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  channel?: Prisma.SortOrder
  summary?: Prisma.SortOrder
  occurredAt?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  dealId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type InteractionCreateNestedManyWithoutContactInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutContactInput, Prisma.InteractionUncheckedCreateWithoutContactInput> | Prisma.InteractionCreateWithoutContactInput[] | Prisma.InteractionUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutContactInput | Prisma.InteractionCreateOrConnectWithoutContactInput[]
  createMany?: Prisma.InteractionCreateManyContactInputEnvelope
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
}

export type InteractionUncheckedCreateNestedManyWithoutContactInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutContactInput, Prisma.InteractionUncheckedCreateWithoutContactInput> | Prisma.InteractionCreateWithoutContactInput[] | Prisma.InteractionUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutContactInput | Prisma.InteractionCreateOrConnectWithoutContactInput[]
  createMany?: Prisma.InteractionCreateManyContactInputEnvelope
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
}

export type InteractionUpdateManyWithoutContactNestedInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutContactInput, Prisma.InteractionUncheckedCreateWithoutContactInput> | Prisma.InteractionCreateWithoutContactInput[] | Prisma.InteractionUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutContactInput | Prisma.InteractionCreateOrConnectWithoutContactInput[]
  upsert?: Prisma.InteractionUpsertWithWhereUniqueWithoutContactInput | Prisma.InteractionUpsertWithWhereUniqueWithoutContactInput[]
  createMany?: Prisma.InteractionCreateManyContactInputEnvelope
  set?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  disconnect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  delete?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  update?: Prisma.InteractionUpdateWithWhereUniqueWithoutContactInput | Prisma.InteractionUpdateWithWhereUniqueWithoutContactInput[]
  updateMany?: Prisma.InteractionUpdateManyWithWhereWithoutContactInput | Prisma.InteractionUpdateManyWithWhereWithoutContactInput[]
  deleteMany?: Prisma.InteractionScalarWhereInput | Prisma.InteractionScalarWhereInput[]
}

export type InteractionUncheckedUpdateManyWithoutContactNestedInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutContactInput, Prisma.InteractionUncheckedCreateWithoutContactInput> | Prisma.InteractionCreateWithoutContactInput[] | Prisma.InteractionUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutContactInput | Prisma.InteractionCreateOrConnectWithoutContactInput[]
  upsert?: Prisma.InteractionUpsertWithWhereUniqueWithoutContactInput | Prisma.InteractionUpsertWithWhereUniqueWithoutContactInput[]
  createMany?: Prisma.InteractionCreateManyContactInputEnvelope
  set?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  disconnect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  delete?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  update?: Prisma.InteractionUpdateWithWhereUniqueWithoutContactInput | Prisma.InteractionUpdateWithWhereUniqueWithoutContactInput[]
  updateMany?: Prisma.InteractionUpdateManyWithWhereWithoutContactInput | Prisma.InteractionUpdateManyWithWhereWithoutContactInput[]
  deleteMany?: Prisma.InteractionScalarWhereInput | Prisma.InteractionScalarWhereInput[]
}

export type InteractionCreateNestedManyWithoutDealInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutDealInput, Prisma.InteractionUncheckedCreateWithoutDealInput> | Prisma.InteractionCreateWithoutDealInput[] | Prisma.InteractionUncheckedCreateWithoutDealInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutDealInput | Prisma.InteractionCreateOrConnectWithoutDealInput[]
  createMany?: Prisma.InteractionCreateManyDealInputEnvelope
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
}

export type InteractionUncheckedCreateNestedManyWithoutDealInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutDealInput, Prisma.InteractionUncheckedCreateWithoutDealInput> | Prisma.InteractionCreateWithoutDealInput[] | Prisma.InteractionUncheckedCreateWithoutDealInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutDealInput | Prisma.InteractionCreateOrConnectWithoutDealInput[]
  createMany?: Prisma.InteractionCreateManyDealInputEnvelope
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
}

export type InteractionUpdateManyWithoutDealNestedInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutDealInput, Prisma.InteractionUncheckedCreateWithoutDealInput> | Prisma.InteractionCreateWithoutDealInput[] | Prisma.InteractionUncheckedCreateWithoutDealInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutDealInput | Prisma.InteractionCreateOrConnectWithoutDealInput[]
  upsert?: Prisma.InteractionUpsertWithWhereUniqueWithoutDealInput | Prisma.InteractionUpsertWithWhereUniqueWithoutDealInput[]
  createMany?: Prisma.InteractionCreateManyDealInputEnvelope
  set?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  disconnect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  delete?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  update?: Prisma.InteractionUpdateWithWhereUniqueWithoutDealInput | Prisma.InteractionUpdateWithWhereUniqueWithoutDealInput[]
  updateMany?: Prisma.InteractionUpdateManyWithWhereWithoutDealInput | Prisma.InteractionUpdateManyWithWhereWithoutDealInput[]
  deleteMany?: Prisma.InteractionScalarWhereInput | Prisma.InteractionScalarWhereInput[]
}

export type InteractionUncheckedUpdateManyWithoutDealNestedInput = {
  create?: Prisma.XOR<Prisma.InteractionCreateWithoutDealInput, Prisma.InteractionUncheckedCreateWithoutDealInput> | Prisma.InteractionCreateWithoutDealInput[] | Prisma.InteractionUncheckedCreateWithoutDealInput[]
  connectOrCreate?: Prisma.InteractionCreateOrConnectWithoutDealInput | Prisma.InteractionCreateOrConnectWithoutDealInput[]
  upsert?: Prisma.InteractionUpsertWithWhereUniqueWithoutDealInput | Prisma.InteractionUpsertWithWhereUniqueWithoutDealInput[]
  createMany?: Prisma.InteractionCreateManyDealInputEnvelope
  set?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  disconnect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  delete?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  connect?: Prisma.InteractionWhereUniqueInput | Prisma.InteractionWhereUniqueInput[]
  update?: Prisma.InteractionUpdateWithWhereUniqueWithoutDealInput | Prisma.InteractionUpdateWithWhereUniqueWithoutDealInput[]
  updateMany?: Prisma.InteractionUpdateManyWithWhereWithoutDealInput | Prisma.InteractionUpdateManyWithWhereWithoutDealInput[]
  deleteMany?: Prisma.InteractionScalarWhereInput | Prisma.InteractionScalarWhereInput[]
}

export type InteractionCreateWithoutContactInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  deal?: Prisma.DealCreateNestedOneWithoutInteractionsInput
}

export type InteractionUncheckedCreateWithoutContactInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  dealId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InteractionCreateOrConnectWithoutContactInput = {
  where: Prisma.InteractionWhereUniqueInput
  create: Prisma.XOR<Prisma.InteractionCreateWithoutContactInput, Prisma.InteractionUncheckedCreateWithoutContactInput>
}

export type InteractionCreateManyContactInputEnvelope = {
  data: Prisma.InteractionCreateManyContactInput | Prisma.InteractionCreateManyContactInput[]
  skipDuplicates?: boolean
}

export type InteractionUpsertWithWhereUniqueWithoutContactInput = {
  where: Prisma.InteractionWhereUniqueInput
  update: Prisma.XOR<Prisma.InteractionUpdateWithoutContactInput, Prisma.InteractionUncheckedUpdateWithoutContactInput>
  create: Prisma.XOR<Prisma.InteractionCreateWithoutContactInput, Prisma.InteractionUncheckedCreateWithoutContactInput>
}

export type InteractionUpdateWithWhereUniqueWithoutContactInput = {
  where: Prisma.InteractionWhereUniqueInput
  data: Prisma.XOR<Prisma.InteractionUpdateWithoutContactInput, Prisma.InteractionUncheckedUpdateWithoutContactInput>
}

export type InteractionUpdateManyWithWhereWithoutContactInput = {
  where: Prisma.InteractionScalarWhereInput
  data: Prisma.XOR<Prisma.InteractionUpdateManyMutationInput, Prisma.InteractionUncheckedUpdateManyWithoutContactInput>
}

export type InteractionScalarWhereInput = {
  AND?: Prisma.InteractionScalarWhereInput | Prisma.InteractionScalarWhereInput[]
  OR?: Prisma.InteractionScalarWhereInput[]
  NOT?: Prisma.InteractionScalarWhereInput | Prisma.InteractionScalarWhereInput[]
  id?: Prisma.StringFilter<"Interaction"> | string
  channel?: Prisma.StringFilter<"Interaction"> | string
  summary?: Prisma.StringFilter<"Interaction"> | string
  occurredAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  contactId?: Prisma.StringNullableFilter<"Interaction"> | string | null
  dealId?: Prisma.StringNullableFilter<"Interaction"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Interaction"> | Date | string
}

export type InteractionCreateWithoutDealInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  createdAt?: Date | string
  updatedAt?: Date | string
  contact?: Prisma.ContactCreateNestedOneWithoutInteractionsInput
}

export type InteractionUncheckedCreateWithoutDealInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  contactId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InteractionCreateOrConnectWithoutDealInput = {
  where: Prisma.InteractionWhereUniqueInput
  create: Prisma.XOR<Prisma.InteractionCreateWithoutDealInput, Prisma.InteractionUncheckedCreateWithoutDealInput>
}

export type InteractionCreateManyDealInputEnvelope = {
  data: Prisma.InteractionCreateManyDealInput | Prisma.InteractionCreateManyDealInput[]
  skipDuplicates?: boolean
}

export type InteractionUpsertWithWhereUniqueWithoutDealInput = {
  where: Prisma.InteractionWhereUniqueInput
  update: Prisma.XOR<Prisma.InteractionUpdateWithoutDealInput, Prisma.InteractionUncheckedUpdateWithoutDealInput>
  create: Prisma.XOR<Prisma.InteractionCreateWithoutDealInput, Prisma.InteractionUncheckedCreateWithoutDealInput>
}

export type InteractionUpdateWithWhereUniqueWithoutDealInput = {
  where: Prisma.InteractionWhereUniqueInput
  data: Prisma.XOR<Prisma.InteractionUpdateWithoutDealInput, Prisma.InteractionUncheckedUpdateWithoutDealInput>
}

export type InteractionUpdateManyWithWhereWithoutDealInput = {
  where: Prisma.InteractionScalarWhereInput
  data: Prisma.XOR<Prisma.InteractionUpdateManyMutationInput, Prisma.InteractionUncheckedUpdateManyWithoutDealInput>
}

export type InteractionCreateManyContactInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  dealId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InteractionUpdateWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deal?: Prisma.DealUpdateOneWithoutInteractionsNestedInput
}

export type InteractionUncheckedUpdateWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dealId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InteractionUncheckedUpdateManyWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  dealId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InteractionCreateManyDealInput = {
  id?: string
  channel: string
  summary: string
  occurredAt?: Date | string
  contactId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type InteractionUpdateWithoutDealInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneWithoutInteractionsNestedInput
}

export type InteractionUncheckedUpdateWithoutDealInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contactId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type InteractionUncheckedUpdateManyWithoutDealInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  channel?: Prisma.StringFieldUpdateOperationsInput | string
  summary?: Prisma.StringFieldUpdateOperationsInput | string
  occurredAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contactId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}



export type InteractionSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channel?: boolean
  summary?: boolean
  occurredAt?: boolean
  contactId?: boolean
  dealId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean | Prisma.Interaction$contactArgs<ExtArgs>
  deal?: boolean | Prisma.Interaction$dealArgs<ExtArgs>
}, ExtArgs["result"]["interaction"]>

export type InteractionSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channel?: boolean
  summary?: boolean
  occurredAt?: boolean
  contactId?: boolean
  dealId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean | Prisma.Interaction$contactArgs<ExtArgs>
  deal?: boolean | Prisma.Interaction$dealArgs<ExtArgs>
}, ExtArgs["result"]["interaction"]>

export type InteractionSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  channel?: boolean
  summary?: boolean
  occurredAt?: boolean
  contactId?: boolean
  dealId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  contact?: boolean | Prisma.Interaction$contactArgs<ExtArgs>
  deal?: boolean | Prisma.Interaction$dealArgs<ExtArgs>
}, ExtArgs["result"]["interaction"]>

export type InteractionSelectScalar = {
  id?: boolean
  channel?: boolean
  summary?: boolean
  occurredAt?: boolean
  contactId?: boolean
  dealId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type InteractionOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "channel" | "summary" | "occurredAt" | "contactId" | "dealId" | "createdAt" | "updatedAt", ExtArgs["result"]["interaction"]>
export type InteractionInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contact?: boolean | Prisma.Interaction$contactArgs<ExtArgs>
  deal?: boolean | Prisma.Interaction$dealArgs<ExtArgs>
}
export type InteractionIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contact?: boolean | Prisma.Interaction$contactArgs<ExtArgs>
  deal?: boolean | Prisma.Interaction$dealArgs<ExtArgs>
}
export type InteractionIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  contact?: boolean | Prisma.Interaction$contactArgs<ExtArgs>
  deal?: boolean | Prisma.Interaction$dealArgs<ExtArgs>
}

export type $InteractionPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Interaction"
  objects: {
    contact: Prisma.$ContactPayload<ExtArgs> | null
    deal: Prisma.$DealPayload<ExtArgs> | null
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    channel: string
    summary: string
    occurredAt: Date
    contactId: string | null
    dealId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["interaction"]>
  composites: {}
}

export type InteractionGetPayload<S extends boolean | null | undefined | InteractionDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$InteractionPayload, S>

export type InteractionCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<InteractionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: InteractionCountAggregateInputType | true
  }

export interface InteractionDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Interaction'], meta: { name: 'Interaction' } }
  /**
   * Find zero or one Interaction that matches the filter.
   * @param {InteractionFindUniqueArgs} args - Arguments to find a Interaction
   * @example
   * // Get one Interaction
   * const interaction = await prisma.interaction.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends InteractionFindUniqueArgs>(args: Prisma.SelectSubset<T, InteractionFindUniqueArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Interaction that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {InteractionFindUniqueOrThrowArgs} args - Arguments to find a Interaction
   * @example
   * // Get one Interaction
   * const interaction = await prisma.interaction.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends InteractionFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, InteractionFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Interaction that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionFindFirstArgs} args - Arguments to find a Interaction
   * @example
   * // Get one Interaction
   * const interaction = await prisma.interaction.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends InteractionFindFirstArgs>(args?: Prisma.SelectSubset<T, InteractionFindFirstArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Interaction that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionFindFirstOrThrowArgs} args - Arguments to find a Interaction
   * @example
   * // Get one Interaction
   * const interaction = await prisma.interaction.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends InteractionFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, InteractionFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Interactions that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Interactions
   * const interactions = await prisma.interaction.findMany()
   * 
   * // Get first 10 Interactions
   * const interactions = await prisma.interaction.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const interactionWithIdOnly = await prisma.interaction.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends InteractionFindManyArgs>(args?: Prisma.SelectSubset<T, InteractionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Interaction.
   * @param {InteractionCreateArgs} args - Arguments to create a Interaction.
   * @example
   * // Create one Interaction
   * const Interaction = await prisma.interaction.create({
   *   data: {
   *     // ... data to create a Interaction
   *   }
   * })
   * 
   */
  create<T extends InteractionCreateArgs>(args: Prisma.SelectSubset<T, InteractionCreateArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Interactions.
   * @param {InteractionCreateManyArgs} args - Arguments to create many Interactions.
   * @example
   * // Create many Interactions
   * const interaction = await prisma.interaction.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends InteractionCreateManyArgs>(args?: Prisma.SelectSubset<T, InteractionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Interactions and returns the data saved in the database.
   * @param {InteractionCreateManyAndReturnArgs} args - Arguments to create many Interactions.
   * @example
   * // Create many Interactions
   * const interaction = await prisma.interaction.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Interactions and only return the `id`
   * const interactionWithIdOnly = await prisma.interaction.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends InteractionCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, InteractionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Interaction.
   * @param {InteractionDeleteArgs} args - Arguments to delete one Interaction.
   * @example
   * // Delete one Interaction
   * const Interaction = await prisma.interaction.delete({
   *   where: {
   *     // ... filter to delete one Interaction
   *   }
   * })
   * 
   */
  delete<T extends InteractionDeleteArgs>(args: Prisma.SelectSubset<T, InteractionDeleteArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Interaction.
   * @param {InteractionUpdateArgs} args - Arguments to update one Interaction.
   * @example
   * // Update one Interaction
   * const interaction = await prisma.interaction.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends InteractionUpdateArgs>(args: Prisma.SelectSubset<T, InteractionUpdateArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Interactions.
   * @param {InteractionDeleteManyArgs} args - Arguments to filter Interactions to delete.
   * @example
   * // Delete a few Interactions
   * const { count } = await prisma.interaction.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends InteractionDeleteManyArgs>(args?: Prisma.SelectSubset<T, InteractionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Interactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Interactions
   * const interaction = await prisma.interaction.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends InteractionUpdateManyArgs>(args: Prisma.SelectSubset<T, InteractionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Interactions and returns the data updated in the database.
   * @param {InteractionUpdateManyAndReturnArgs} args - Arguments to update many Interactions.
   * @example
   * // Update many Interactions
   * const interaction = await prisma.interaction.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Interactions and only return the `id`
   * const interactionWithIdOnly = await prisma.interaction.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends InteractionUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, InteractionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Interaction.
   * @param {InteractionUpsertArgs} args - Arguments to update or create a Interaction.
   * @example
   * // Update or create a Interaction
   * const interaction = await prisma.interaction.upsert({
   *   create: {
   *     // ... data to create a Interaction
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Interaction we want to update
   *   }
   * })
   */
  upsert<T extends InteractionUpsertArgs>(args: Prisma.SelectSubset<T, InteractionUpsertArgs<ExtArgs>>): Prisma.Prisma__InteractionClient<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Interactions.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionCountArgs} args - Arguments to filter Interactions to count.
   * @example
   * // Count the number of Interactions
   * const count = await prisma.interaction.count({
   *   where: {
   *     // ... the filter for the Interactions we want to count
   *   }
   * })
  **/
  count<T extends InteractionCountArgs>(
    args?: Prisma.Subset<T, InteractionCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], InteractionCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Interaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends InteractionAggregateArgs>(args: Prisma.Subset<T, InteractionAggregateArgs>): Prisma.PrismaPromise<GetInteractionAggregateType<T>>

  /**
   * Group by Interaction.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {InteractionGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends InteractionGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: InteractionGroupByArgs['orderBy'] }
      : { orderBy?: InteractionGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, InteractionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteractionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Interaction model
 */
readonly fields: InteractionFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Interaction.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__InteractionClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  contact<T extends Prisma.Interaction$contactArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Interaction$contactArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  deal<T extends Prisma.Interaction$dealArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Interaction$dealArgs<ExtArgs>>): Prisma.Prisma__DealClient<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Interaction model
 */
export interface InteractionFieldRefs {
  readonly id: Prisma.FieldRef<"Interaction", 'String'>
  readonly channel: Prisma.FieldRef<"Interaction", 'String'>
  readonly summary: Prisma.FieldRef<"Interaction", 'String'>
  readonly occurredAt: Prisma.FieldRef<"Interaction", 'DateTime'>
  readonly contactId: Prisma.FieldRef<"Interaction", 'String'>
  readonly dealId: Prisma.FieldRef<"Interaction", 'String'>
  readonly createdAt: Prisma.FieldRef<"Interaction", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Interaction", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Interaction findUnique
 */
export type InteractionFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * Filter, which Interaction to fetch.
   */
  where: Prisma.InteractionWhereUniqueInput
}

/**
 * Interaction findUniqueOrThrow
 */
export type InteractionFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * Filter, which Interaction to fetch.
   */
  where: Prisma.InteractionWhereUniqueInput
}

/**
 * Interaction findFirst
 */
export type InteractionFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * Filter, which Interaction to fetch.
   */
  where?: Prisma.InteractionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Interactions to fetch.
   */
  orderBy?: Prisma.InteractionOrderByWithRelationInput | Prisma.InteractionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Interactions.
   */
  cursor?: Prisma.InteractionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Interactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Interactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Interactions.
   */
  distinct?: Prisma.InteractionScalarFieldEnum | Prisma.InteractionScalarFieldEnum[]
}

/**
 * Interaction findFirstOrThrow
 */
export type InteractionFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * Filter, which Interaction to fetch.
   */
  where?: Prisma.InteractionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Interactions to fetch.
   */
  orderBy?: Prisma.InteractionOrderByWithRelationInput | Prisma.InteractionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Interactions.
   */
  cursor?: Prisma.InteractionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Interactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Interactions.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Interactions.
   */
  distinct?: Prisma.InteractionScalarFieldEnum | Prisma.InteractionScalarFieldEnum[]
}

/**
 * Interaction findMany
 */
export type InteractionFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * Filter, which Interactions to fetch.
   */
  where?: Prisma.InteractionWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Interactions to fetch.
   */
  orderBy?: Prisma.InteractionOrderByWithRelationInput | Prisma.InteractionOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Interactions.
   */
  cursor?: Prisma.InteractionWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Interactions from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Interactions.
   */
  skip?: number
  distinct?: Prisma.InteractionScalarFieldEnum | Prisma.InteractionScalarFieldEnum[]
}

/**
 * Interaction create
 */
export type InteractionCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * The data needed to create a Interaction.
   */
  data: Prisma.XOR<Prisma.InteractionCreateInput, Prisma.InteractionUncheckedCreateInput>
}

/**
 * Interaction createMany
 */
export type InteractionCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Interactions.
   */
  data: Prisma.InteractionCreateManyInput | Prisma.InteractionCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Interaction createManyAndReturn
 */
export type InteractionCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * The data used to create many Interactions.
   */
  data: Prisma.InteractionCreateManyInput | Prisma.InteractionCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Interaction update
 */
export type InteractionUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * The data needed to update a Interaction.
   */
  data: Prisma.XOR<Prisma.InteractionUpdateInput, Prisma.InteractionUncheckedUpdateInput>
  /**
   * Choose, which Interaction to update.
   */
  where: Prisma.InteractionWhereUniqueInput
}

/**
 * Interaction updateMany
 */
export type InteractionUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Interactions.
   */
  data: Prisma.XOR<Prisma.InteractionUpdateManyMutationInput, Prisma.InteractionUncheckedUpdateManyInput>
  /**
   * Filter which Interactions to update
   */
  where?: Prisma.InteractionWhereInput
  /**
   * Limit how many Interactions to update.
   */
  limit?: number
}

/**
 * Interaction updateManyAndReturn
 */
export type InteractionUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * The data used to update Interactions.
   */
  data: Prisma.XOR<Prisma.InteractionUpdateManyMutationInput, Prisma.InteractionUncheckedUpdateManyInput>
  /**
   * Filter which Interactions to update
   */
  where?: Prisma.InteractionWhereInput
  /**
   * Limit how many Interactions to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Interaction upsert
 */
export type InteractionUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * The filter to search for the Interaction to update in case it exists.
   */
  where: Prisma.InteractionWhereUniqueInput
  /**
   * In case the Interaction found by the `where` argument doesn't exist, create a new Interaction with this data.
   */
  create: Prisma.XOR<Prisma.InteractionCreateInput, Prisma.InteractionUncheckedCreateInput>
  /**
   * In case the Interaction was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.InteractionUpdateInput, Prisma.InteractionUncheckedUpdateInput>
}

/**
 * Interaction delete
 */
export type InteractionDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  /**
   * Filter which Interaction to delete.
   */
  where: Prisma.InteractionWhereUniqueInput
}

/**
 * Interaction deleteMany
 */
export type InteractionDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Interactions to delete
   */
  where?: Prisma.InteractionWhereInput
  /**
   * Limit how many Interactions to delete.
   */
  limit?: number
}

/**
 * Interaction.contact
 */
export type Interaction$contactArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  where?: Prisma.ContactWhereInput
}

/**
 * Interaction.deal
 */
export type Interaction$dealArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  where?: Prisma.DealWhereInput
}

/**
 * Interaction without action
 */
export type InteractionDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
}
