
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/*
 * This file exports the `Contact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import type * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Contact
 * 
 */
export type ContactModel = runtime.Types.Result.DefaultSelection<Prisma.$ContactPayload>

export type AggregateContact = {
  _count: ContactCountAggregateOutputType | null
  _min: ContactMinAggregateOutputType | null
  _max: ContactMaxAggregateOutputType | null
}

export type ContactMinAggregateOutputType = {
  id: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  phone: string | null
  status: $Enums.ContactStatus | null
  position: string | null
  source: string | null
  notes: string | null
  companyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContactMaxAggregateOutputType = {
  id: string | null
  firstName: string | null
  lastName: string | null
  email: string | null
  phone: string | null
  status: $Enums.ContactStatus | null
  position: string | null
  source: string | null
  notes: string | null
  companyId: string | null
  createdAt: Date | null
  updatedAt: Date | null
}

export type ContactCountAggregateOutputType = {
  id: number
  firstName: number
  lastName: number
  email: number
  phone: number
  status: number
  position: number
  source: number
  notes: number
  companyId: number
  createdAt: number
  updatedAt: number
  _all: number
}


export type ContactMinAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  phone?: true
  status?: true
  position?: true
  source?: true
  notes?: true
  companyId?: true
  createdAt?: true
  updatedAt?: true
}

export type ContactMaxAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  phone?: true
  status?: true
  position?: true
  source?: true
  notes?: true
  companyId?: true
  createdAt?: true
  updatedAt?: true
}

export type ContactCountAggregateInputType = {
  id?: true
  firstName?: true
  lastName?: true
  email?: true
  phone?: true
  status?: true
  position?: true
  source?: true
  notes?: true
  companyId?: true
  createdAt?: true
  updatedAt?: true
  _all?: true
}

export type ContactAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contact to aggregate.
   */
  where?: Prisma.ContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.ContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Contacts
  **/
  _count?: true | ContactCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: ContactMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: ContactMaxAggregateInputType
}

export type GetContactAggregateType<T extends ContactAggregateArgs> = {
      [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContact[P]>
    : Prisma.GetScalarType<T[P], AggregateContact[P]>
}




export type ContactGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.ContactWhereInput
  orderBy?: Prisma.ContactOrderByWithAggregationInput | Prisma.ContactOrderByWithAggregationInput[]
  by: Prisma.ContactScalarFieldEnum[] | Prisma.ContactScalarFieldEnum
  having?: Prisma.ContactScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: ContactCountAggregateInputType | true
  _min?: ContactMinAggregateInputType
  _max?: ContactMaxAggregateInputType
}

export type ContactGroupByOutputType = {
  id: string
  firstName: string
  lastName: string
  email: string
  phone: string | null
  status: $Enums.ContactStatus
  position: string | null
  source: string | null
  notes: string | null
  companyId: string | null
  createdAt: Date
  updatedAt: Date
  _count: ContactCountAggregateOutputType | null
  _min: ContactMinAggregateOutputType | null
  _max: ContactMaxAggregateOutputType | null
}

type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContactGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof ContactGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], ContactGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], ContactGroupByOutputType[P]>
      }
    >
  >



export type ContactWhereInput = {
  AND?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[]
  OR?: Prisma.ContactWhereInput[]
  NOT?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[]
  id?: Prisma.StringFilter<"Contact"> | string
  firstName?: Prisma.StringFilter<"Contact"> | string
  lastName?: Prisma.StringFilter<"Contact"> | string
  email?: Prisma.StringFilter<"Contact"> | string
  phone?: Prisma.StringNullableFilter<"Contact"> | string | null
  status?: Prisma.EnumContactStatusFilter<"Contact"> | $Enums.ContactStatus
  position?: Prisma.StringNullableFilter<"Contact"> | string | null
  source?: Prisma.StringNullableFilter<"Contact"> | string | null
  notes?: Prisma.StringNullableFilter<"Contact"> | string | null
  companyId?: Prisma.StringNullableFilter<"Contact"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contact"> | Date | string
  company?: Prisma.XOR<Prisma.CompanyNullableScalarRelationFilter, Prisma.CompanyWhereInput> | null
  deals?: Prisma.DealListRelationFilter
  tasks?: Prisma.TaskListRelationFilter
  interactions?: Prisma.InteractionListRelationFilter
}

export type ContactOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  position?: Prisma.SortOrderInput | Prisma.SortOrder
  source?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  companyId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  company?: Prisma.CompanyOrderByWithRelationInput
  deals?: Prisma.DealOrderByRelationAggregateInput
  tasks?: Prisma.TaskOrderByRelationAggregateInput
  interactions?: Prisma.InteractionOrderByRelationAggregateInput
}

export type ContactWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  email?: string
  AND?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[]
  OR?: Prisma.ContactWhereInput[]
  NOT?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[]
  firstName?: Prisma.StringFilter<"Contact"> | string
  lastName?: Prisma.StringFilter<"Contact"> | string
  phone?: Prisma.StringNullableFilter<"Contact"> | string | null
  status?: Prisma.EnumContactStatusFilter<"Contact"> | $Enums.ContactStatus
  position?: Prisma.StringNullableFilter<"Contact"> | string | null
  source?: Prisma.StringNullableFilter<"Contact"> | string | null
  notes?: Prisma.StringNullableFilter<"Contact"> | string | null
  companyId?: Prisma.StringNullableFilter<"Contact"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contact"> | Date | string
  company?: Prisma.XOR<Prisma.CompanyNullableScalarRelationFilter, Prisma.CompanyWhereInput> | null
  deals?: Prisma.DealListRelationFilter
  tasks?: Prisma.TaskListRelationFilter
  interactions?: Prisma.InteractionListRelationFilter
}, "id" | "email">

export type ContactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrderInput | Prisma.SortOrder
  status?: Prisma.SortOrder
  position?: Prisma.SortOrderInput | Prisma.SortOrder
  source?: Prisma.SortOrderInput | Prisma.SortOrder
  notes?: Prisma.SortOrderInput | Prisma.SortOrder
  companyId?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  _count?: Prisma.ContactCountOrderByAggregateInput
  _max?: Prisma.ContactMaxOrderByAggregateInput
  _min?: Prisma.ContactMinOrderByAggregateInput
}

export type ContactScalarWhereWithAggregatesInput = {
  AND?: Prisma.ContactScalarWhereWithAggregatesInput | Prisma.ContactScalarWhereWithAggregatesInput[]
  OR?: Prisma.ContactScalarWhereWithAggregatesInput[]
  NOT?: Prisma.ContactScalarWhereWithAggregatesInput | Prisma.ContactScalarWhereWithAggregatesInput[]
  id?: Prisma.StringWithAggregatesFilter<"Contact"> | string
  firstName?: Prisma.StringWithAggregatesFilter<"Contact"> | string
  lastName?: Prisma.StringWithAggregatesFilter<"Contact"> | string
  email?: Prisma.StringWithAggregatesFilter<"Contact"> | string
  phone?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null
  status?: Prisma.EnumContactStatusWithAggregatesFilter<"Contact"> | $Enums.ContactStatus
  position?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null
  source?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null
  notes?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null
  companyId?: Prisma.StringNullableWithAggregatesFilter<"Contact"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Contact"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Contact"> | Date | string
}

export type ContactCreateInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  company?: Prisma.CompanyCreateNestedOneWithoutContactsInput
  deals?: Prisma.DealCreateNestedManyWithoutContactInput
  tasks?: Prisma.TaskCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutContactInput
}

export type ContactUncheckedCreateInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deals?: Prisma.DealUncheckedCreateNestedManyWithoutContactInput
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutContactInput
}

export type ContactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  company?: Prisma.CompanyUpdateOneWithoutContactsNestedInput
  deals?: Prisma.DealUpdateManyWithoutContactNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutContactNestedInput
}

export type ContactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deals?: Prisma.DealUncheckedUpdateManyWithoutContactNestedInput
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutContactNestedInput
}

export type ContactCreateManyInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type ContactListRelationFilter = {
  every?: Prisma.ContactWhereInput
  some?: Prisma.ContactWhereInput
  none?: Prisma.ContactWhereInput
}

export type ContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type ContactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  status?: Prisma.SortOrder
  position?: Prisma.SortOrder
  source?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  status?: Prisma.SortOrder
  position?: Prisma.SortOrder
  source?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  firstName?: Prisma.SortOrder
  lastName?: Prisma.SortOrder
  email?: Prisma.SortOrder
  phone?: Prisma.SortOrder
  status?: Prisma.SortOrder
  position?: Prisma.SortOrder
  source?: Prisma.SortOrder
  notes?: Prisma.SortOrder
  companyId?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
}

export type ContactScalarRelationFilter = {
  is?: Prisma.ContactWhereInput
  isNot?: Prisma.ContactWhereInput
}

export type ContactNullableScalarRelationFilter = {
  is?: Prisma.ContactWhereInput | null
  isNot?: Prisma.ContactWhereInput | null
}

export type ContactCreateNestedManyWithoutCompanyInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutCompanyInput, Prisma.ContactUncheckedCreateWithoutCompanyInput> | Prisma.ContactCreateWithoutCompanyInput[] | Prisma.ContactUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutCompanyInput | Prisma.ContactCreateOrConnectWithoutCompanyInput[]
  createMany?: Prisma.ContactCreateManyCompanyInputEnvelope
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
}

export type ContactUncheckedCreateNestedManyWithoutCompanyInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutCompanyInput, Prisma.ContactUncheckedCreateWithoutCompanyInput> | Prisma.ContactCreateWithoutCompanyInput[] | Prisma.ContactUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutCompanyInput | Prisma.ContactCreateOrConnectWithoutCompanyInput[]
  createMany?: Prisma.ContactCreateManyCompanyInputEnvelope
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
}

export type ContactUpdateManyWithoutCompanyNestedInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutCompanyInput, Prisma.ContactUncheckedCreateWithoutCompanyInput> | Prisma.ContactCreateWithoutCompanyInput[] | Prisma.ContactUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutCompanyInput | Prisma.ContactCreateOrConnectWithoutCompanyInput[]
  upsert?: Prisma.ContactUpsertWithWhereUniqueWithoutCompanyInput | Prisma.ContactUpsertWithWhereUniqueWithoutCompanyInput[]
  createMany?: Prisma.ContactCreateManyCompanyInputEnvelope
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  disconnect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  update?: Prisma.ContactUpdateWithWhereUniqueWithoutCompanyInput | Prisma.ContactUpdateWithWhereUniqueWithoutCompanyInput[]
  updateMany?: Prisma.ContactUpdateManyWithWhereWithoutCompanyInput | Prisma.ContactUpdateManyWithWhereWithoutCompanyInput[]
  deleteMany?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[]
}

export type ContactUncheckedUpdateManyWithoutCompanyNestedInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutCompanyInput, Prisma.ContactUncheckedCreateWithoutCompanyInput> | Prisma.ContactCreateWithoutCompanyInput[] | Prisma.ContactUncheckedCreateWithoutCompanyInput[]
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutCompanyInput | Prisma.ContactCreateOrConnectWithoutCompanyInput[]
  upsert?: Prisma.ContactUpsertWithWhereUniqueWithoutCompanyInput | Prisma.ContactUpsertWithWhereUniqueWithoutCompanyInput[]
  createMany?: Prisma.ContactCreateManyCompanyInputEnvelope
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  disconnect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[]
  update?: Prisma.ContactUpdateWithWhereUniqueWithoutCompanyInput | Prisma.ContactUpdateWithWhereUniqueWithoutCompanyInput[]
  updateMany?: Prisma.ContactUpdateManyWithWhereWithoutCompanyInput | Prisma.ContactUpdateManyWithWhereWithoutCompanyInput[]
  deleteMany?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[]
}

export type EnumContactStatusFieldUpdateOperationsInput = {
  set?: $Enums.ContactStatus
}

export type ContactCreateNestedOneWithoutDealsInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutDealsInput, Prisma.ContactUncheckedCreateWithoutDealsInput>
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutDealsInput
  connect?: Prisma.ContactWhereUniqueInput
}

export type ContactUpdateOneRequiredWithoutDealsNestedInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutDealsInput, Prisma.ContactUncheckedCreateWithoutDealsInput>
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutDealsInput
  upsert?: Prisma.ContactUpsertWithoutDealsInput
  connect?: Prisma.ContactWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContactUpdateToOneWithWhereWithoutDealsInput, Prisma.ContactUpdateWithoutDealsInput>, Prisma.ContactUncheckedUpdateWithoutDealsInput>
}

export type ContactCreateNestedOneWithoutTasksInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutTasksInput, Prisma.ContactUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutTasksInput
  connect?: Prisma.ContactWhereUniqueInput
}

export type ContactUpdateOneWithoutTasksNestedInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutTasksInput, Prisma.ContactUncheckedCreateWithoutTasksInput>
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutTasksInput
  upsert?: Prisma.ContactUpsertWithoutTasksInput
  disconnect?: Prisma.ContactWhereInput | boolean
  delete?: Prisma.ContactWhereInput | boolean
  connect?: Prisma.ContactWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContactUpdateToOneWithWhereWithoutTasksInput, Prisma.ContactUpdateWithoutTasksInput>, Prisma.ContactUncheckedUpdateWithoutTasksInput>
}

export type ContactCreateNestedOneWithoutInteractionsInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutInteractionsInput, Prisma.ContactUncheckedCreateWithoutInteractionsInput>
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutInteractionsInput
  connect?: Prisma.ContactWhereUniqueInput
}

export type ContactUpdateOneWithoutInteractionsNestedInput = {
  create?: Prisma.XOR<Prisma.ContactCreateWithoutInteractionsInput, Prisma.ContactUncheckedCreateWithoutInteractionsInput>
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutInteractionsInput
  upsert?: Prisma.ContactUpsertWithoutInteractionsInput
  disconnect?: Prisma.ContactWhereInput | boolean
  delete?: Prisma.ContactWhereInput | boolean
  connect?: Prisma.ContactWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.ContactUpdateToOneWithWhereWithoutInteractionsInput, Prisma.ContactUpdateWithoutInteractionsInput>, Prisma.ContactUncheckedUpdateWithoutInteractionsInput>
}

export type ContactCreateWithoutCompanyInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deals?: Prisma.DealCreateNestedManyWithoutContactInput
  tasks?: Prisma.TaskCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutContactInput
}

export type ContactUncheckedCreateWithoutCompanyInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deals?: Prisma.DealUncheckedCreateNestedManyWithoutContactInput
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutContactInput
}

export type ContactCreateOrConnectWithoutCompanyInput = {
  where: Prisma.ContactWhereUniqueInput
  create: Prisma.XOR<Prisma.ContactCreateWithoutCompanyInput, Prisma.ContactUncheckedCreateWithoutCompanyInput>
}

export type ContactCreateManyCompanyInputEnvelope = {
  data: Prisma.ContactCreateManyCompanyInput | Prisma.ContactCreateManyCompanyInput[]
  skipDuplicates?: boolean
}

export type ContactUpsertWithWhereUniqueWithoutCompanyInput = {
  where: Prisma.ContactWhereUniqueInput
  update: Prisma.XOR<Prisma.ContactUpdateWithoutCompanyInput, Prisma.ContactUncheckedUpdateWithoutCompanyInput>
  create: Prisma.XOR<Prisma.ContactCreateWithoutCompanyInput, Prisma.ContactUncheckedCreateWithoutCompanyInput>
}

export type ContactUpdateWithWhereUniqueWithoutCompanyInput = {
  where: Prisma.ContactWhereUniqueInput
  data: Prisma.XOR<Prisma.ContactUpdateWithoutCompanyInput, Prisma.ContactUncheckedUpdateWithoutCompanyInput>
}

export type ContactUpdateManyWithWhereWithoutCompanyInput = {
  where: Prisma.ContactScalarWhereInput
  data: Prisma.XOR<Prisma.ContactUpdateManyMutationInput, Prisma.ContactUncheckedUpdateManyWithoutCompanyInput>
}

export type ContactScalarWhereInput = {
  AND?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[]
  OR?: Prisma.ContactScalarWhereInput[]
  NOT?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[]
  id?: Prisma.StringFilter<"Contact"> | string
  firstName?: Prisma.StringFilter<"Contact"> | string
  lastName?: Prisma.StringFilter<"Contact"> | string
  email?: Prisma.StringFilter<"Contact"> | string
  phone?: Prisma.StringNullableFilter<"Contact"> | string | null
  status?: Prisma.EnumContactStatusFilter<"Contact"> | $Enums.ContactStatus
  position?: Prisma.StringNullableFilter<"Contact"> | string | null
  source?: Prisma.StringNullableFilter<"Contact"> | string | null
  notes?: Prisma.StringNullableFilter<"Contact"> | string | null
  companyId?: Prisma.StringNullableFilter<"Contact"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Contact"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Contact"> | Date | string
}

export type ContactCreateWithoutDealsInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  company?: Prisma.CompanyCreateNestedOneWithoutContactsInput
  tasks?: Prisma.TaskCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutContactInput
}

export type ContactUncheckedCreateWithoutDealsInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutContactInput
}

export type ContactCreateOrConnectWithoutDealsInput = {
  where: Prisma.ContactWhereUniqueInput
  create: Prisma.XOR<Prisma.ContactCreateWithoutDealsInput, Prisma.ContactUncheckedCreateWithoutDealsInput>
}

export type ContactUpsertWithoutDealsInput = {
  update: Prisma.XOR<Prisma.ContactUpdateWithoutDealsInput, Prisma.ContactUncheckedUpdateWithoutDealsInput>
  create: Prisma.XOR<Prisma.ContactCreateWithoutDealsInput, Prisma.ContactUncheckedCreateWithoutDealsInput>
  where?: Prisma.ContactWhereInput
}

export type ContactUpdateToOneWithWhereWithoutDealsInput = {
  where?: Prisma.ContactWhereInput
  data: Prisma.XOR<Prisma.ContactUpdateWithoutDealsInput, Prisma.ContactUncheckedUpdateWithoutDealsInput>
}

export type ContactUpdateWithoutDealsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  company?: Prisma.CompanyUpdateOneWithoutContactsNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutContactNestedInput
}

export type ContactUncheckedUpdateWithoutDealsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutContactNestedInput
}

export type ContactCreateWithoutTasksInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  company?: Prisma.CompanyCreateNestedOneWithoutContactsInput
  deals?: Prisma.DealCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionCreateNestedManyWithoutContactInput
}

export type ContactUncheckedCreateWithoutTasksInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deals?: Prisma.DealUncheckedCreateNestedManyWithoutContactInput
  interactions?: Prisma.InteractionUncheckedCreateNestedManyWithoutContactInput
}

export type ContactCreateOrConnectWithoutTasksInput = {
  where: Prisma.ContactWhereUniqueInput
  create: Prisma.XOR<Prisma.ContactCreateWithoutTasksInput, Prisma.ContactUncheckedCreateWithoutTasksInput>
}

export type ContactUpsertWithoutTasksInput = {
  update: Prisma.XOR<Prisma.ContactUpdateWithoutTasksInput, Prisma.ContactUncheckedUpdateWithoutTasksInput>
  create: Prisma.XOR<Prisma.ContactCreateWithoutTasksInput, Prisma.ContactUncheckedCreateWithoutTasksInput>
  where?: Prisma.ContactWhereInput
}

export type ContactUpdateToOneWithWhereWithoutTasksInput = {
  where?: Prisma.ContactWhereInput
  data: Prisma.XOR<Prisma.ContactUpdateWithoutTasksInput, Prisma.ContactUncheckedUpdateWithoutTasksInput>
}

export type ContactUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  company?: Prisma.CompanyUpdateOneWithoutContactsNestedInput
  deals?: Prisma.DealUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutContactNestedInput
}

export type ContactUncheckedUpdateWithoutTasksInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deals?: Prisma.DealUncheckedUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutContactNestedInput
}

export type ContactCreateWithoutInteractionsInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  company?: Prisma.CompanyCreateNestedOneWithoutContactsInput
  deals?: Prisma.DealCreateNestedManyWithoutContactInput
  tasks?: Prisma.TaskCreateNestedManyWithoutContactInput
}

export type ContactUncheckedCreateWithoutInteractionsInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  companyId?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  deals?: Prisma.DealUncheckedCreateNestedManyWithoutContactInput
  tasks?: Prisma.TaskUncheckedCreateNestedManyWithoutContactInput
}

export type ContactCreateOrConnectWithoutInteractionsInput = {
  where: Prisma.ContactWhereUniqueInput
  create: Prisma.XOR<Prisma.ContactCreateWithoutInteractionsInput, Prisma.ContactUncheckedCreateWithoutInteractionsInput>
}

export type ContactUpsertWithoutInteractionsInput = {
  update: Prisma.XOR<Prisma.ContactUpdateWithoutInteractionsInput, Prisma.ContactUncheckedUpdateWithoutInteractionsInput>
  create: Prisma.XOR<Prisma.ContactCreateWithoutInteractionsInput, Prisma.ContactUncheckedCreateWithoutInteractionsInput>
  where?: Prisma.ContactWhereInput
}

export type ContactUpdateToOneWithWhereWithoutInteractionsInput = {
  where?: Prisma.ContactWhereInput
  data: Prisma.XOR<Prisma.ContactUpdateWithoutInteractionsInput, Prisma.ContactUncheckedUpdateWithoutInteractionsInput>
}

export type ContactUpdateWithoutInteractionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  company?: Prisma.CompanyUpdateOneWithoutContactsNestedInput
  deals?: Prisma.DealUpdateManyWithoutContactNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutContactNestedInput
}

export type ContactUncheckedUpdateWithoutInteractionsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  companyId?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deals?: Prisma.DealUncheckedUpdateManyWithoutContactNestedInput
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutContactNestedInput
}

export type ContactCreateManyCompanyInput = {
  id?: string
  firstName: string
  lastName: string
  email: string
  phone?: string | null
  status?: $Enums.ContactStatus
  position?: string | null
  source?: string | null
  notes?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type ContactUpdateWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deals?: Prisma.DealUpdateManyWithoutContactNestedInput
  tasks?: Prisma.TaskUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUpdateManyWithoutContactNestedInput
}

export type ContactUncheckedUpdateWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  deals?: Prisma.DealUncheckedUpdateManyWithoutContactNestedInput
  tasks?: Prisma.TaskUncheckedUpdateManyWithoutContactNestedInput
  interactions?: Prisma.InteractionUncheckedUpdateManyWithoutContactNestedInput
}

export type ContactUncheckedUpdateManyWithoutCompanyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  firstName?: Prisma.StringFieldUpdateOperationsInput | string
  lastName?: Prisma.StringFieldUpdateOperationsInput | string
  email?: Prisma.StringFieldUpdateOperationsInput | string
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  status?: Prisma.EnumContactStatusFieldUpdateOperationsInput | $Enums.ContactStatus
  position?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type ContactCountOutputType
 */

export type ContactCountOutputType = {
  deals: number
  tasks: number
  interactions: number
}

export type ContactCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  deals?: boolean | ContactCountOutputTypeCountDealsArgs
  tasks?: boolean | ContactCountOutputTypeCountTasksArgs
  interactions?: boolean | ContactCountOutputTypeCountInteractionsArgs
}

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the ContactCountOutputType
   */
  select?: Prisma.ContactCountOutputTypeSelect<ExtArgs> | null
}

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeCountDealsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.DealWhereInput
}

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeCountTasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.TaskWhereInput
}

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeCountInteractionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.InteractionWhereInput
}


export type ContactSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  phone?: boolean
  status?: boolean
  position?: boolean
  source?: boolean
  notes?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  company?: boolean | Prisma.Contact$companyArgs<ExtArgs>
  deals?: boolean | Prisma.Contact$dealsArgs<ExtArgs>
  tasks?: boolean | Prisma.Contact$tasksArgs<ExtArgs>
  interactions?: boolean | Prisma.Contact$interactionsArgs<ExtArgs>
  _count?: boolean | Prisma.ContactCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["contact"]>

export type ContactSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  phone?: boolean
  status?: boolean
  position?: boolean
  source?: boolean
  notes?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  company?: boolean | Prisma.Contact$companyArgs<ExtArgs>
}, ExtArgs["result"]["contact"]>

export type ContactSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  phone?: boolean
  status?: boolean
  position?: boolean
  source?: boolean
  notes?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  company?: boolean | Prisma.Contact$companyArgs<ExtArgs>
}, ExtArgs["result"]["contact"]>

export type ContactSelectScalar = {
  id?: boolean
  firstName?: boolean
  lastName?: boolean
  email?: boolean
  phone?: boolean
  status?: boolean
  position?: boolean
  source?: boolean
  notes?: boolean
  companyId?: boolean
  createdAt?: boolean
  updatedAt?: boolean
}

export type ContactOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "firstName" | "lastName" | "email" | "phone" | "status" | "position" | "source" | "notes" | "companyId" | "createdAt" | "updatedAt", ExtArgs["result"]["contact"]>
export type ContactInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  company?: boolean | Prisma.Contact$companyArgs<ExtArgs>
  deals?: boolean | Prisma.Contact$dealsArgs<ExtArgs>
  tasks?: boolean | Prisma.Contact$tasksArgs<ExtArgs>
  interactions?: boolean | Prisma.Contact$interactionsArgs<ExtArgs>
  _count?: boolean | Prisma.ContactCountOutputTypeDefaultArgs<ExtArgs>
}
export type ContactIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  company?: boolean | Prisma.Contact$companyArgs<ExtArgs>
}
export type ContactIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  company?: boolean | Prisma.Contact$companyArgs<ExtArgs>
}

export type $ContactPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Contact"
  objects: {
    company: Prisma.$CompanyPayload<ExtArgs> | null
    deals: Prisma.$DealPayload<ExtArgs>[]
    tasks: Prisma.$TaskPayload<ExtArgs>[]
    interactions: Prisma.$InteractionPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    firstName: string
    lastName: string
    email: string
    phone: string | null
    status: $Enums.ContactStatus
    position: string | null
    source: string | null
    notes: string | null
    companyId: string | null
    createdAt: Date
    updatedAt: Date
  }, ExtArgs["result"]["contact"]>
  composites: {}
}

export type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$ContactPayload, S>

export type ContactCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: ContactCountAggregateInputType | true
  }

export interface ContactDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact'], meta: { name: 'Contact' } }
  /**
   * Find zero or one Contact that matches the filter.
   * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactFindUniqueArgs>(args: Prisma.SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindFirstArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactFindFirstArgs>(args?: Prisma.SelectSubset<T, ContactFindFirstArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Contact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Contacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Contacts
   * const contacts = await prisma.contact.findMany()
   * 
   * // Get first 10 Contacts
   * const contacts = await prisma.contact.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends ContactFindManyArgs>(args?: Prisma.SelectSubset<T, ContactFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Contact.
   * @param {ContactCreateArgs} args - Arguments to create a Contact.
   * @example
   * // Create one Contact
   * const Contact = await prisma.contact.create({
   *   data: {
   *     // ... data to create a Contact
   *   }
   * })
   * 
   */
  create<T extends ContactCreateArgs>(args: Prisma.SelectSubset<T, ContactCreateArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Contacts.
   * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contact = await prisma.contact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends ContactCreateManyArgs>(args?: Prisma.SelectSubset<T, ContactCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Contacts and returns the data saved in the database.
   * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contact = await prisma.contact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Contacts and only return the `id`
   * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Contact.
   * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
   * @example
   * // Delete one Contact
   * const Contact = await prisma.contact.delete({
   *   where: {
   *     // ... filter to delete one Contact
   *   }
   * })
   * 
   */
  delete<T extends ContactDeleteArgs>(args: Prisma.SelectSubset<T, ContactDeleteArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Contact.
   * @param {ContactUpdateArgs} args - Arguments to update one Contact.
   * @example
   * // Update one Contact
   * const contact = await prisma.contact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends ContactUpdateArgs>(args: Prisma.SelectSubset<T, ContactUpdateArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Contacts.
   * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
   * @example
   * // Delete a few Contacts
   * const { count } = await prisma.contact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends ContactDeleteManyArgs>(args?: Prisma.SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Contacts
   * const contact = await prisma.contact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends ContactUpdateManyArgs>(args: Prisma.SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Contacts and returns the data updated in the database.
   * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
   * @example
   * // Update many Contacts
   * const contact = await prisma.contact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Contacts and only return the `id`
   * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Contact.
   * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
   * @example
   * // Update or create a Contact
   * const contact = await prisma.contact.upsert({
   *   create: {
   *     // ... data to create a Contact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Contact we want to update
   *   }
   * })
   */
  upsert<T extends ContactUpsertArgs>(args: Prisma.SelectSubset<T, ContactUpsertArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
   * @example
   * // Count the number of Contacts
   * const count = await prisma.contact.count({
   *   where: {
   *     // ... the filter for the Contacts we want to count
   *   }
   * })
  **/
  count<T extends ContactCountArgs>(
    args?: Prisma.Subset<T, ContactCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContactCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Contact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends ContactAggregateArgs>(args: Prisma.Subset<T, ContactAggregateArgs>): Prisma.PrismaPromise<GetContactAggregateType<T>>

  /**
   * Group by Contact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends ContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactGroupByArgs['orderBy'] }
      : { orderBy?: ContactGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Contact model
 */
readonly fields: ContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Contact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  company<T extends Prisma.Contact$companyArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Contact$companyArgs<ExtArgs>>): Prisma.Prisma__CompanyClient<runtime.Types.Result.GetResult<Prisma.$CompanyPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
  deals<T extends Prisma.Contact$dealsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Contact$dealsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$DealPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  tasks<T extends Prisma.Contact$tasksArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Contact$tasksArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$TaskPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  interactions<T extends Prisma.Contact$interactionsArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Contact$interactionsArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$InteractionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Contact model
 */
export interface ContactFieldRefs {
  readonly id: Prisma.FieldRef<"Contact", 'String'>
  readonly firstName: Prisma.FieldRef<"Contact", 'String'>
  readonly lastName: Prisma.FieldRef<"Contact", 'String'>
  readonly email: Prisma.FieldRef<"Contact", 'String'>
  readonly phone: Prisma.FieldRef<"Contact", 'String'>
  readonly status: Prisma.FieldRef<"Contact", 'ContactStatus'>
  readonly position: Prisma.FieldRef<"Contact", 'String'>
  readonly source: Prisma.FieldRef<"Contact", 'String'>
  readonly notes: Prisma.FieldRef<"Contact", 'String'>
  readonly companyId: Prisma.FieldRef<"Contact", 'String'>
  readonly createdAt: Prisma.FieldRef<"Contact", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Contact", 'DateTime'>
}
    

// Custom InputTypes
/**
 * Contact findUnique
 */
export type ContactFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * Filter, which Contact to fetch.
   */
  where: Prisma.ContactWhereUniqueInput
}

/**
 * Contact findUniqueOrThrow
 */
export type ContactFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * Filter, which Contact to fetch.
   */
  where: Prisma.ContactWhereUniqueInput
}

/**
 * Contact findFirst
 */
export type ContactFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * Filter, which Contact to fetch.
   */
  where?: Prisma.ContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[]
}

/**
 * Contact findFirstOrThrow
 */
export type ContactFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * Filter, which Contact to fetch.
   */
  where?: Prisma.ContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[]
}

/**
 * Contact findMany
 */
export type ContactFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * Filter, which Contacts to fetch.
   */
  where?: Prisma.ContactWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Contacts.
   */
  skip?: number
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[]
}

/**
 * Contact create
 */
export type ContactCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * The data needed to create a Contact.
   */
  data: Prisma.XOR<Prisma.ContactCreateInput, Prisma.ContactUncheckedCreateInput>
}

/**
 * Contact createMany
 */
export type ContactCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactCreateManyInput | Prisma.ContactCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Contact createManyAndReturn
 */
export type ContactCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactCreateManyInput | Prisma.ContactCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Contact update
 */
export type ContactUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * The data needed to update a Contact.
   */
  data: Prisma.XOR<Prisma.ContactUpdateInput, Prisma.ContactUncheckedUpdateInput>
  /**
   * Choose, which Contact to update.
   */
  where: Prisma.ContactWhereUniqueInput
}

/**
 * Contact updateMany
 */
export type ContactUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<Prisma.ContactUpdateManyMutationInput, Prisma.ContactUncheckedUpdateManyInput>
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactWhereInput
  /**
   * Limit how many Contacts to update.
   */
  limit?: number
}

/**
 * Contact updateManyAndReturn
 */
export type ContactUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<Prisma.ContactUpdateManyMutationInput, Prisma.ContactUncheckedUpdateManyInput>
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactWhereInput
  /**
   * Limit how many Contacts to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Contact upsert
 */
export type ContactUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * The filter to search for the Contact to update in case it exists.
   */
  where: Prisma.ContactWhereUniqueInput
  /**
   * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
   */
  create: Prisma.XOR<Prisma.ContactCreateInput, Prisma.ContactUncheckedCreateInput>
  /**
   * In case the Contact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContactUpdateInput, Prisma.ContactUncheckedUpdateInput>
}

/**
 * Contact delete
 */
export type ContactDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
  /**
   * Filter which Contact to delete.
   */
  where: Prisma.ContactWhereUniqueInput
}

/**
 * Contact deleteMany
 */
export type ContactDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Contacts to delete
   */
  where?: Prisma.ContactWhereInput
  /**
   * Limit how many Contacts to delete.
   */
  limit?: number
}

/**
 * Contact.company
 */
export type Contact$companyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Company
   */
  select?: Prisma.CompanySelect<ExtArgs> | null
  /**
   * Omit specific fields from the Company
   */
  omit?: Prisma.CompanyOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.CompanyInclude<ExtArgs> | null
  where?: Prisma.CompanyWhereInput
}

/**
 * Contact.deals
 */
export type Contact$dealsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Deal
   */
  select?: Prisma.DealSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Deal
   */
  omit?: Prisma.DealOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.DealInclude<ExtArgs> | null
  where?: Prisma.DealWhereInput
  orderBy?: Prisma.DealOrderByWithRelationInput | Prisma.DealOrderByWithRelationInput[]
  cursor?: Prisma.DealWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.DealScalarFieldEnum | Prisma.DealScalarFieldEnum[]
}

/**
 * Contact.tasks
 */
export type Contact$tasksArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Task
   */
  select?: Prisma.TaskSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Task
   */
  omit?: Prisma.TaskOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.TaskInclude<ExtArgs> | null
  where?: Prisma.TaskWhereInput
  orderBy?: Prisma.TaskOrderByWithRelationInput | Prisma.TaskOrderByWithRelationInput[]
  cursor?: Prisma.TaskWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.TaskScalarFieldEnum | Prisma.TaskScalarFieldEnum[]
}

/**
 * Contact.interactions
 */
export type Contact$interactionsArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Interaction
   */
  select?: Prisma.InteractionSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Interaction
   */
  omit?: Prisma.InteractionOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.InteractionInclude<ExtArgs> | null
  where?: Prisma.InteractionWhereInput
  orderBy?: Prisma.InteractionOrderByWithRelationInput | Prisma.InteractionOrderByWithRelationInput[]
  cursor?: Prisma.InteractionWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.InteractionScalarFieldEnum | Prisma.InteractionScalarFieldEnum[]
}

/**
 * Contact without action
 */
export type ContactDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null
}
